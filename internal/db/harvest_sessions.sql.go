// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: harvest_sessions.sql

package db

import (
	"context"
	"database/sql"
)

const cleanupExpiredSessions = `-- name: CleanupExpiredSessions :exec
DELETE FROM harvest_sessions WHERE last_activity < ?
`

func (q *Queries) CleanupExpiredSessions(ctx context.Context, lastActivity sql.NullTime) error {
	_, err := q.exec(ctx, q.cleanupExpiredSessionsStmt, cleanupExpiredSessions, lastActivity)
	return err
}

const createHarvestSession = `-- name: CreateHarvestSession :one
INSERT INTO harvest_sessions (node_id, player_id)
VALUES (?, ?)
RETURNING session_id, node_id, player_id, started_at, last_activity, resources_gathered
`

type CreateHarvestSessionParams struct {
	NodeID   int64 `json:"node_id"`
	PlayerID int64 `json:"player_id"`
}

func (q *Queries) CreateHarvestSession(ctx context.Context, arg CreateHarvestSessionParams) (HarvestSession, error) {
	row := q.queryRow(ctx, q.createHarvestSessionStmt, createHarvestSession, arg.NodeID, arg.PlayerID)
	var i HarvestSession
	err := row.Scan(
		&i.SessionID,
		&i.NodeID,
		&i.PlayerID,
		&i.StartedAt,
		&i.LastActivity,
		&i.ResourcesGathered,
	)
	return i, err
}

const getHarvestSession = `-- name: GetHarvestSession :one
SELECT session_id, node_id, player_id, started_at, last_activity, resources_gathered
FROM harvest_sessions
WHERE session_id = ?
`

func (q *Queries) GetHarvestSession(ctx context.Context, sessionID int64) (HarvestSession, error) {
	row := q.queryRow(ctx, q.getHarvestSessionStmt, getHarvestSession, sessionID)
	var i HarvestSession
	err := row.Scan(
		&i.SessionID,
		&i.NodeID,
		&i.PlayerID,
		&i.StartedAt,
		&i.LastActivity,
		&i.ResourcesGathered,
	)
	return i, err
}

const getPlayerActiveSession = `-- name: GetPlayerActiveSession :one
SELECT session_id, node_id, player_id, started_at, last_activity, resources_gathered
FROM harvest_sessions
WHERE player_id = ? AND last_activity > ?
`

type GetPlayerActiveSessionParams struct {
	PlayerID     int64        `json:"player_id"`
	LastActivity sql.NullTime `json:"last_activity"`
}

func (q *Queries) GetPlayerActiveSession(ctx context.Context, arg GetPlayerActiveSessionParams) (HarvestSession, error) {
	row := q.queryRow(ctx, q.getPlayerActiveSessionStmt, getPlayerActiveSession, arg.PlayerID, arg.LastActivity)
	var i HarvestSession
	err := row.Scan(
		&i.SessionID,
		&i.NodeID,
		&i.PlayerID,
		&i.StartedAt,
		&i.LastActivity,
		&i.ResourcesGathered,
	)
	return i, err
}

const getPlayerSessions = `-- name: GetPlayerSessions :many
SELECT session_id, node_id, player_id, started_at, last_activity, resources_gathered
FROM harvest_sessions
WHERE player_id = ?
`

func (q *Queries) GetPlayerSessions(ctx context.Context, playerID int64) ([]HarvestSession, error) {
	rows, err := q.query(ctx, q.getPlayerSessionsStmt, getPlayerSessions, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HarvestSession{}
	for rows.Next() {
		var i HarvestSession
		if err := rows.Scan(
			&i.SessionID,
			&i.NodeID,
			&i.PlayerID,
			&i.StartedAt,
			&i.LastActivity,
			&i.ResourcesGathered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionActivity = `-- name: UpdateSessionActivity :exec
UPDATE harvest_sessions SET last_activity = CURRENT_TIMESTAMP, resources_gathered = resources_gathered + ?
WHERE session_id = ?
`

type UpdateSessionActivityParams struct {
	ResourcesGathered sql.NullInt64 `json:"resources_gathered"`
	SessionID         int64         `json:"session_id"`
}

func (q *Queries) UpdateSessionActivity(ctx context.Context, arg UpdateSessionActivityParams) error {
	_, err := q.exec(ctx, q.updateSessionActivityStmt, updateSessionActivity, arg.ResourcesGathered, arg.SessionID)
	return err
}
