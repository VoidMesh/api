// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: harvest_log.sql

package db

import (
	"context"
)

const createHarvestLog = `-- name: CreateHarvestLog :exec
INSERT INTO harvest_log (node_id, player_id, amount_harvested, node_yield_before, node_yield_after)
VALUES (?, ?, ?, ?, ?)
`

type CreateHarvestLogParams struct {
	NodeID          int64 `json:"node_id"`
	PlayerID        int64 `json:"player_id"`
	AmountHarvested int64 `json:"amount_harvested"`
	NodeYieldBefore int64 `json:"node_yield_before"`
	NodeYieldAfter  int64 `json:"node_yield_after"`
}

func (q *Queries) CreateHarvestLog(ctx context.Context, arg CreateHarvestLogParams) error {
	_, err := q.exec(ctx, q.createHarvestLogStmt, createHarvestLog,
		arg.NodeID,
		arg.PlayerID,
		arg.AmountHarvested,
		arg.NodeYieldBefore,
		arg.NodeYieldAfter,
	)
	return err
}

const getPlayerDailyHarvest = `-- name: GetPlayerDailyHarvest :one
SELECT COUNT(*) FROM harvest_log
WHERE player_id = ? AND node_id = ? AND DATE(harvested_at) = DATE('now')
`

type GetPlayerDailyHarvestParams struct {
	PlayerID int64 `json:"player_id"`
	NodeID   int64 `json:"node_id"`
}

func (q *Queries) GetPlayerDailyHarvest(ctx context.Context, arg GetPlayerDailyHarvestParams) (int64, error) {
	row := q.queryRow(ctx, q.getPlayerDailyHarvestStmt, getPlayerDailyHarvest, arg.PlayerID, arg.NodeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
