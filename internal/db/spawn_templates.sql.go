// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: spawn_templates.sql

package db

import (
	"context"
	"database/sql"
)

const getRespawnDelay = `-- name: GetRespawnDelay :one
SELECT respawn_delay_hours FROM node_spawn_templates
WHERE node_type = ? AND node_subtype = ?
`

type GetRespawnDelayParams struct {
	NodeType    int64         `json:"node_type"`
	NodeSubtype sql.NullInt64 `json:"node_subtype"`
}

func (q *Queries) GetRespawnDelay(ctx context.Context, arg GetRespawnDelayParams) (sql.NullInt64, error) {
	row := q.queryRow(ctx, q.getRespawnDelayStmt, getRespawnDelay, arg.NodeType, arg.NodeSubtype)
	var respawn_delay_hours sql.NullInt64
	err := row.Scan(&respawn_delay_hours)
	return respawn_delay_hours, err
}

const getSpawnTemplates = `-- name: GetSpawnTemplates :many
SELECT template_id, node_type, node_subtype, spawn_type, min_yield, max_yield, regeneration_rate, respawn_delay_hours, spawn_weight, biome_restriction, cluster_size_min, cluster_size_max, cluster_spread_min, cluster_spread_max, clusters_per_chunk, noise_scale, noise_threshold, noise_octaves, noise_persistence
FROM node_spawn_templates
`

func (q *Queries) GetSpawnTemplates(ctx context.Context) ([]NodeSpawnTemplate, error) {
	rows, err := q.query(ctx, q.getSpawnTemplatesStmt, getSpawnTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NodeSpawnTemplate{}
	for rows.Next() {
		var i NodeSpawnTemplate
		if err := rows.Scan(
			&i.TemplateID,
			&i.NodeType,
			&i.NodeSubtype,
			&i.SpawnType,
			&i.MinYield,
			&i.MaxYield,
			&i.RegenerationRate,
			&i.RespawnDelayHours,
			&i.SpawnWeight,
			&i.BiomeRestriction,
			&i.ClusterSizeMin,
			&i.ClusterSizeMax,
			&i.ClusterSpreadMin,
			&i.ClusterSpreadMax,
			&i.ClustersPerChunk,
			&i.NoiseScale,
			&i.NoiseThreshold,
			&i.NoiseOctaves,
			&i.NoisePersistence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorldConfig = `-- name: GetWorldConfig :one
SELECT config_value FROM world_config WHERE config_key = ?
`

func (q *Queries) GetWorldConfig(ctx context.Context, configKey string) (string, error) {
	row := q.queryRow(ctx, q.getWorldConfigStmt, getWorldConfig, configKey)
	var config_value string
	err := row.Scan(&config_value)
	return config_value, err
}

const setWorldConfig = `-- name: SetWorldConfig :exec
INSERT OR REPLACE INTO world_config (config_key, config_value) VALUES (?, ?)
`

type SetWorldConfigParams struct {
	ConfigKey   string `json:"config_key"`
	ConfigValue string `json:"config_value"`
}

func (q *Queries) SetWorldConfig(ctx context.Context, arg SetWorldConfigParams) error {
	_, err := q.exec(ctx, q.setWorldConfigStmt, setWorldConfig, arg.ConfigKey, arg.ConfigValue)
	return err
}
