// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: spawn_templates.sql

package db

import (
	"context"
	"database/sql"
)

const getRespawnDelay = `-- name: GetRespawnDelay :one
SELECT respawn_delay_hours FROM node_spawn_templates
WHERE node_type = ? AND node_subtype = ?
`

type GetRespawnDelayParams struct {
	NodeType    int64         `json:"node_type"`
	NodeSubtype sql.NullInt64 `json:"node_subtype"`
}

func (q *Queries) GetRespawnDelay(ctx context.Context, arg GetRespawnDelayParams) (sql.NullInt64, error) {
	row := q.queryRow(ctx, q.getRespawnDelayStmt, getRespawnDelay, arg.NodeType, arg.NodeSubtype)
	var respawn_delay_hours sql.NullInt64
	err := row.Scan(&respawn_delay_hours)
	return respawn_delay_hours, err
}

const getSpawnTemplates = `-- name: GetSpawnTemplates :many
SELECT template_id, node_type, node_subtype, spawn_type, min_yield, max_yield, regeneration_rate, respawn_delay_hours, spawn_weight, biome_restriction
FROM node_spawn_templates
WHERE spawn_type = ?
`

func (q *Queries) GetSpawnTemplates(ctx context.Context, spawnType int64) ([]NodeSpawnTemplate, error) {
	rows, err := q.query(ctx, q.getSpawnTemplatesStmt, getSpawnTemplates, spawnType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NodeSpawnTemplate{}
	for rows.Next() {
		var i NodeSpawnTemplate
		if err := rows.Scan(
			&i.TemplateID,
			&i.NodeType,
			&i.NodeSubtype,
			&i.SpawnType,
			&i.MinYield,
			&i.MaxYield,
			&i.RegenerationRate,
			&i.RespawnDelayHours,
			&i.SpawnWeight,
			&i.BiomeRestriction,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
