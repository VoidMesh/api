// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.items.sql

package db

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
  name,
  description,
  item_type,
  rarity,
  stack_size,
  visual_data
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, description, item_type, rarity, stack_size, visual_data, created_at
`

type CreateItemParams struct {
	Name        string
	Description string
	ItemType    string
	Rarity      string
	StackSize   int32
	VisualData  []byte
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem,
		arg.Name,
		arg.Description,
		arg.ItemType,
		arg.Rarity,
		arg.StackSize,
		arg.VisualData,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ItemType,
		&i.Rarity,
		&i.StackSize,
		&i.VisualData,
		&i.CreatedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteItem, id)
	return err
}

const getAllItems = `-- name: GetAllItems :many
SELECT
  id,
  name,
  description,
  item_type,
  rarity,
  stack_size,
  visual_data,
  created_at
FROM items
ORDER BY name
`

func (q *Queries) GetAllItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.Query(ctx, getAllItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ItemType,
			&i.Rarity,
			&i.StackSize,
			&i.VisualData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItem = `-- name: GetItem :one

SELECT
  id,
  name,
  description,
  item_type,
  rarity,
  stack_size,
  visual_data,
  created_at
FROM items
WHERE id = $1
`

// Items table operations
func (q *Queries) GetItem(ctx context.Context, id int32) (Item, error) {
	row := q.db.QueryRow(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ItemType,
		&i.Rarity,
		&i.StackSize,
		&i.VisualData,
		&i.CreatedAt,
	)
	return i, err
}

const getItemByName = `-- name: GetItemByName :one
SELECT
  id,
  name,
  description,
  item_type,
  rarity,
  stack_size,
  visual_data,
  created_at
FROM items
WHERE name = $1
`

func (q *Queries) GetItemByName(ctx context.Context, name string) (Item, error) {
	row := q.db.QueryRow(ctx, getItemByName, name)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ItemType,
		&i.Rarity,
		&i.StackSize,
		&i.VisualData,
		&i.CreatedAt,
	)
	return i, err
}

const getItemsByType = `-- name: GetItemsByType :many
SELECT
  id,
  name,
  description,
  item_type,
  rarity,
  stack_size,
  visual_data,
  created_at
FROM items
WHERE item_type = $1
ORDER BY name
`

func (q *Queries) GetItemsByType(ctx context.Context, itemType string) ([]Item, error) {
	rows, err := q.db.Query(ctx, getItemsByType, itemType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ItemType,
			&i.Rarity,
			&i.StackSize,
			&i.VisualData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE items
SET
  name = $2,
  description = $3,
  item_type = $4,
  rarity = $5,
  stack_size = $6,
  visual_data = $7
WHERE id = $1
RETURNING id, name, description, item_type, rarity, stack_size, visual_data, created_at
`

type UpdateItemParams struct {
	ID          int32
	Name        string
	Description string
	ItemType    string
	Rarity      string
	StackSize   int32
	VisualData  []byte
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, updateItem,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ItemType,
		arg.Rarity,
		arg.StackSize,
		arg.VisualData,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ItemType,
		&i.Rarity,
		&i.StackSize,
		&i.VisualData,
		&i.CreatedAt,
	)
	return i, err
}
