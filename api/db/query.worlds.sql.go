// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.worlds.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWorld = `-- name: CreateWorld :one
INSERT INTO worlds (
  name, seed
) VALUES (
  $1, $2
)
RETURNING id, name, seed, created_at
`

type CreateWorldParams struct {
	Name string
	Seed int64
}

func (q *Queries) CreateWorld(ctx context.Context, arg CreateWorldParams) (World, error) {
	row := q.db.QueryRow(ctx, createWorld, arg.Name, arg.Seed)
	var i World
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Seed,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWorld = `-- name: DeleteWorld :exec
DELETE FROM worlds
WHERE id = $1
`

func (q *Queries) DeleteWorld(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteWorld, id)
	return err
}

const getDefaultWorld = `-- name: GetDefaultWorld :one
SELECT id, name, seed, created_at FROM worlds
ORDER BY created_at ASC
LIMIT 1
`

func (q *Queries) GetDefaultWorld(ctx context.Context) (World, error) {
	row := q.db.QueryRow(ctx, getDefaultWorld)
	var i World
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Seed,
		&i.CreatedAt,
	)
	return i, err
}

const getWorldByID = `-- name: GetWorldByID :one
SELECT id, name, seed, created_at FROM worlds
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetWorldByID(ctx context.Context, id pgtype.UUID) (World, error) {
	row := q.db.QueryRow(ctx, getWorldByID, id)
	var i World
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Seed,
		&i.CreatedAt,
	)
	return i, err
}

const listWorlds = `-- name: ListWorlds :many
SELECT id, name, seed, created_at FROM worlds
ORDER BY created_at
`

func (q *Queries) ListWorlds(ctx context.Context) ([]World, error) {
	rows, err := q.db.Query(ctx, listWorlds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []World
	for rows.Next() {
		var i World
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Seed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorld = `-- name: UpdateWorld :one
UPDATE worlds
SET name = $2
WHERE id = $1
RETURNING id, name, seed, created_at
`

type UpdateWorldParams struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) UpdateWorld(ctx context.Context, arg UpdateWorldParams) (World, error) {
	row := q.db.QueryRow(ctx, updateWorld, arg.ID, arg.Name)
	var i World
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Seed,
		&i.CreatedAt,
	)
	return i, err
}
