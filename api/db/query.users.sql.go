// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    display_name,
    email,
    password_hash
  )
VALUES ($1, $2, $3, $4)
RETURNING id, username, display_name, email, email_verified, password_hash, reset_password_token, reset_password_expires, created_at, last_login_at, account_locked, failed_login_attempts
`

type CreateUserParams struct {
	Username     string
	DisplayName  string
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.DisplayName,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, display_name, email, email_verified, password_hash, reset_password_token, reset_password_expires, created_at, last_login_at, account_locked, failed_login_attempts FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, display_name, email, email_verified, password_hash, reset_password_token, reset_password_expires, created_at, last_login_at, account_locked, failed_login_attempts FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
	)
	return i, err
}

const getUserByResetToken = `-- name: GetUserByResetToken :one
SELECT id, username, display_name, email, email_verified, password_hash, reset_password_token, reset_password_expires, created_at, last_login_at, account_locked, failed_login_attempts FROM users
WHERE reset_password_token = $1
  AND reset_password_expires > NOW()
LIMIT 1
`

func (q *Queries) GetUserByResetToken(ctx context.Context, resetPasswordToken pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByResetToken, resetPasswordToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, display_name, email, email_verified, password_hash, reset_password_token, reset_password_expires, created_at, last_login_at, account_locked, failed_login_attempts FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
	)
	return i, err
}

const indexUsers = `-- name: IndexUsers :many
SELECT id, username, display_name, email, email_verified, password_hash, reset_password_token, reset_password_expires, created_at, last_login_at, account_locked, failed_login_attempts FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type IndexUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) IndexUsers(ctx context.Context, arg IndexUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, indexUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.Email,
			&i.EmailVerified,
			&i.PasswordHash,
			&i.ResetPasswordToken,
			&i.ResetPasswordExpires,
			&i.CreatedAt,
			&i.LastLoginAt,
			&i.AccountLocked,
			&i.FailedLoginAttempts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLastLoginAt = `-- name: UpdateLastLoginAt :one
UPDATE users
SET last_login_at = $2
WHERE id = $1
RETURNING id, username, display_name, email, email_verified, password_hash, reset_password_token, reset_password_expires, created_at, last_login_at, account_locked, failed_login_attempts
`

type UpdateLastLoginAtParams struct {
	ID          pgtype.UUID
	LastLoginAt pgtype.Timestamp
}

func (q *Queries) UpdateLastLoginAt(ctx context.Context, arg UpdateLastLoginAtParams) (User, error) {
	row := q.db.QueryRow(ctx, updateLastLoginAt, arg.ID, arg.LastLoginAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
	)
	return i, err
}

const updateLoginAttempts = `-- name: UpdateLoginAttempts :one
UPDATE users
SET failed_login_attempts = $2,
  account_locked = $3
WHERE id = $1
RETURNING id, username, display_name, email, email_verified, password_hash, reset_password_token, reset_password_expires, created_at, last_login_at, account_locked, failed_login_attempts
`

type UpdateLoginAttemptsParams struct {
	ID                  pgtype.UUID
	FailedLoginAttempts pgtype.Int4
	AccountLocked       pgtype.Bool
}

func (q *Queries) UpdateLoginAttempts(ctx context.Context, arg UpdateLoginAttemptsParams) (User, error) {
	row := q.db.QueryRow(ctx, updateLoginAttempts, arg.ID, arg.FailedLoginAttempts, arg.AccountLocked)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
	)
	return i, err
}

const updatePasswordResetToken = `-- name: UpdatePasswordResetToken :one
UPDATE users
SET reset_password_token = $2,
  reset_password_expires = $3
WHERE id = $1
RETURNING id, username, display_name, email, email_verified, password_hash, reset_password_token, reset_password_expires, created_at, last_login_at, account_locked, failed_login_attempts
`

type UpdatePasswordResetTokenParams struct {
	ID                   pgtype.UUID
	ResetPasswordToken   pgtype.Text
	ResetPasswordExpires pgtype.Timestamp
}

func (q *Queries) UpdatePasswordResetToken(ctx context.Context, arg UpdatePasswordResetTokenParams) (User, error) {
	row := q.db.QueryRow(ctx, updatePasswordResetToken, arg.ID, arg.ResetPasswordToken, arg.ResetPasswordExpires)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET display_name = COALESCE($2, display_name),
  email = COALESCE($3, email),
  email_verified = COALESCE($4, email_verified),
  password_hash = COALESCE($5, password_hash),
  last_login_at = COALESCE($6, last_login_at)
WHERE id = $1
RETURNING id, username, display_name, email, email_verified, password_hash, reset_password_token, reset_password_expires, created_at, last_login_at, account_locked, failed_login_attempts
`

type UpdateUserParams struct {
	ID            pgtype.UUID
	DisplayName   string
	Email         string
	EmailVerified pgtype.Bool
	PasswordHash  string
	LastLoginAt   pgtype.Timestamp
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.DisplayName,
		arg.Email,
		arg.EmailVerified,
		arg.PasswordHash,
		arg.LastLoginAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
	)
	return i, err
}

const verifyEmail = `-- name: VerifyEmail :one
UPDATE users
SET email_verified = true
WHERE id = $1
RETURNING id, username, display_name, email, email_verified, password_hash, reset_password_token, reset_password_expires, created_at, last_login_at, account_locked, failed_login_attempts
`

func (q *Queries) VerifyEmail(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, verifyEmail, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpires,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.AccountLocked,
		&i.FailedLoginAttempts,
	)
	return i, err
}
