// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.characters.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters (user_id, name, x, y, chunk_x, chunk_y)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, name, x, y, chunk_x, chunk_y, created_at
`

type CreateCharacterParams struct {
	UserID pgtype.UUID
	Name   string
	X      int32
	Y      int32
	ChunkX int32
	ChunkY int32
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRow(ctx, createCharacter,
		arg.UserID,
		arg.Name,
		arg.X,
		arg.Y,
		arg.ChunkX,
		arg.ChunkY,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.ChunkX,
		&i.ChunkY,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters
WHERE id = $1
`

func (q *Queries) DeleteCharacter(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCharacter, id)
	return err
}

const getCharacterById = `-- name: GetCharacterById :one
SELECT id, user_id, name, x, y, chunk_x, chunk_y, created_at FROM characters
WHERE id = $1
`

func (q *Queries) GetCharacterById(ctx context.Context, id pgtype.UUID) (Character, error) {
	row := q.db.QueryRow(ctx, getCharacterById, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.ChunkX,
		&i.ChunkY,
		&i.CreatedAt,
	)
	return i, err
}

const getCharacterByUserAndName = `-- name: GetCharacterByUserAndName :one
SELECT id, user_id, name, x, y, chunk_x, chunk_y, created_at FROM characters
WHERE user_id = $1 AND name = $2
`

type GetCharacterByUserAndNameParams struct {
	UserID pgtype.UUID
	Name   string
}

func (q *Queries) GetCharacterByUserAndName(ctx context.Context, arg GetCharacterByUserAndNameParams) (Character, error) {
	row := q.db.QueryRow(ctx, getCharacterByUserAndName, arg.UserID, arg.Name)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.ChunkX,
		&i.ChunkY,
		&i.CreatedAt,
	)
	return i, err
}

const getCharactersByUser = `-- name: GetCharactersByUser :many
SELECT id, user_id, name, x, y, chunk_x, chunk_y, created_at FROM characters
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCharactersByUser(ctx context.Context, userID pgtype.UUID) ([]Character, error) {
	rows, err := q.db.Query(ctx, getCharactersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.X,
			&i.Y,
			&i.ChunkX,
			&i.ChunkY,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCharactersInChunk = `-- name: GetCharactersInChunk :many
SELECT id, user_id, name, x, y, chunk_x, chunk_y, created_at FROM characters
WHERE chunk_x = $1 AND chunk_y = $2
`

type GetCharactersInChunkParams struct {
	ChunkX int32
	ChunkY int32
}

func (q *Queries) GetCharactersInChunk(ctx context.Context, arg GetCharactersInChunkParams) ([]Character, error) {
	rows, err := q.db.Query(ctx, getCharactersInChunk, arg.ChunkX, arg.ChunkY)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.X,
			&i.Y,
			&i.ChunkX,
			&i.ChunkY,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharacterPosition = `-- name: UpdateCharacterPosition :one
UPDATE characters
SET x = $2, y = $3, chunk_x = $4, chunk_y = $5
WHERE id = $1
RETURNING id, user_id, name, x, y, chunk_x, chunk_y, created_at
`

type UpdateCharacterPositionParams struct {
	ID     pgtype.UUID
	X      int32
	Y      int32
	ChunkX int32
	ChunkY int32
}

func (q *Queries) UpdateCharacterPosition(ctx context.Context, arg UpdateCharacterPositionParams) (Character, error) {
	row := q.db.QueryRow(ctx, updateCharacterPosition,
		arg.ID,
		arg.X,
		arg.Y,
		arg.ChunkX,
		arg.ChunkY,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.X,
		&i.Y,
		&i.ChunkX,
		&i.ChunkY,
		&i.CreatedAt,
	)
	return i, err
}
