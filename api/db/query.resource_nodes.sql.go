// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.resource_nodes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countResourceNodesByType = `-- name: CountResourceNodesByType :one
SELECT COUNT(*) FROM resource_nodes
WHERE world_id = $1 AND chunk_x = $2 AND chunk_y = $3 AND resource_node_type_id = $4
`

type CountResourceNodesByTypeParams struct {
	WorldID            pgtype.UUID
	ChunkX             int32
	ChunkY             int32
	ResourceNodeTypeID int32
}

func (q *Queries) CountResourceNodesByType(ctx context.Context, arg CountResourceNodesByTypeParams) (int64, error) {
	row := q.db.QueryRow(ctx, countResourceNodesByType,
		arg.WorldID,
		arg.ChunkX,
		arg.ChunkY,
		arg.ResourceNodeTypeID,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countResourceNodesInChunk = `-- name: CountResourceNodesInChunk :one
SELECT COUNT(*) FROM resource_nodes
WHERE world_id = $1 AND chunk_x = $2 AND chunk_y = $3
`

type CountResourceNodesInChunkParams struct {
	WorldID pgtype.UUID
	ChunkX  int32
	ChunkY  int32
}

func (q *Queries) CountResourceNodesInChunk(ctx context.Context, arg CountResourceNodesInChunkParams) (int64, error) {
	row := q.db.QueryRow(ctx, countResourceNodesInChunk, arg.WorldID, arg.ChunkX, arg.ChunkY)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createResourceNode = `-- name: CreateResourceNode :one

INSERT INTO resource_nodes (
  resource_node_type_id,
  world_id,
  chunk_x,
  chunk_y,
  cluster_id,
  x,
  y,
  size
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, resource_node_type_id, world_id, chunk_x, chunk_y, cluster_id, x, y, size, created_at
`

type CreateResourceNodeParams struct {
	ResourceNodeTypeID int32
	WorldID            pgtype.UUID
	ChunkX             int32
	ChunkY             int32
	ClusterID          string
	X                  int32
	Y                  int32
	Size               int32
}

// Resource Node Operations
func (q *Queries) CreateResourceNode(ctx context.Context, arg CreateResourceNodeParams) (ResourceNode, error) {
	row := q.db.QueryRow(ctx, createResourceNode,
		arg.ResourceNodeTypeID,
		arg.WorldID,
		arg.ChunkX,
		arg.ChunkY,
		arg.ClusterID,
		arg.X,
		arg.Y,
		arg.Size,
	)
	var i ResourceNode
	err := row.Scan(
		&i.ID,
		&i.ResourceNodeTypeID,
		&i.WorldID,
		&i.ChunkX,
		&i.ChunkY,
		&i.ClusterID,
		&i.X,
		&i.Y,
		&i.Size,
		&i.CreatedAt,
	)
	return i, err
}

const deleteResourceNodesInChunk = `-- name: DeleteResourceNodesInChunk :exec
DELETE FROM resource_nodes
WHERE world_id = $1 AND chunk_x = $2 AND chunk_y = $3
`

type DeleteResourceNodesInChunkParams struct {
	WorldID pgtype.UUID
	ChunkX  int32
	ChunkY  int32
}

func (q *Queries) DeleteResourceNodesInChunk(ctx context.Context, arg DeleteResourceNodesInChunkParams) error {
	_, err := q.db.Exec(ctx, deleteResourceNodesInChunk, arg.WorldID, arg.ChunkX, arg.ChunkY)
	return err
}

const getResourceNode = `-- name: GetResourceNode :one
SELECT
  rn.id, rn.resource_node_type_id, rn.world_id, rn.chunk_x, rn.chunk_y, rn.cluster_id, rn.x, rn.y, rn.size, rn.created_at
FROM resource_nodes rn
WHERE rn.id = $1
`

func (q *Queries) GetResourceNode(ctx context.Context, id int32) (ResourceNode, error) {
	row := q.db.QueryRow(ctx, getResourceNode, id)
	var i ResourceNode
	err := row.Scan(
		&i.ID,
		&i.ResourceNodeTypeID,
		&i.WorldID,
		&i.ChunkX,
		&i.ChunkY,
		&i.ClusterID,
		&i.X,
		&i.Y,
		&i.Size,
		&i.CreatedAt,
	)
	return i, err
}

const getResourceNodesInChunk = `-- name: GetResourceNodesInChunk :many
SELECT
  rn.id, rn.resource_node_type_id, rn.world_id, rn.chunk_x, rn.chunk_y, rn.cluster_id, rn.x, rn.y, rn.size, rn.created_at
FROM resource_nodes rn
WHERE rn.world_id = $1 AND rn.chunk_x = $2 AND rn.chunk_y = $3
`

type GetResourceNodesInChunkParams struct {
	WorldID pgtype.UUID
	ChunkX  int32
	ChunkY  int32
}

func (q *Queries) GetResourceNodesInChunk(ctx context.Context, arg GetResourceNodesInChunkParams) ([]ResourceNode, error) {
	rows, err := q.db.Query(ctx, getResourceNodesInChunk, arg.WorldID, arg.ChunkX, arg.ChunkY)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceNode
	for rows.Next() {
		var i ResourceNode
		if err := rows.Scan(
			&i.ID,
			&i.ResourceNodeTypeID,
			&i.WorldID,
			&i.ChunkX,
			&i.ChunkY,
			&i.ClusterID,
			&i.X,
			&i.Y,
			&i.Size,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourceNodesInChunkRange = `-- name: GetResourceNodesInChunkRange :many
SELECT
  rn.id, rn.resource_node_type_id, rn.world_id, rn.chunk_x, rn.chunk_y, rn.cluster_id, rn.x, rn.y, rn.size, rn.created_at
FROM resource_nodes rn
WHERE rn.world_id = $1 AND
      rn.chunk_x >= $2 AND rn.chunk_x <= $3 AND
      rn.chunk_y >= $4 AND rn.chunk_y <= $5
`

type GetResourceNodesInChunkRangeParams struct {
	WorldID  pgtype.UUID
	ChunkX   int32
	ChunkX_2 int32
	ChunkY   int32
	ChunkY_2 int32
}

func (q *Queries) GetResourceNodesInChunkRange(ctx context.Context, arg GetResourceNodesInChunkRangeParams) ([]ResourceNode, error) {
	rows, err := q.db.Query(ctx, getResourceNodesInChunkRange,
		arg.WorldID,
		arg.ChunkX,
		arg.ChunkX_2,
		arg.ChunkY,
		arg.ChunkY_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceNode
	for rows.Next() {
		var i ResourceNode
		if err := rows.Scan(
			&i.ID,
			&i.ResourceNodeTypeID,
			&i.WorldID,
			&i.ChunkX,
			&i.ChunkY,
			&i.ClusterID,
			&i.X,
			&i.Y,
			&i.Size,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourceNodesInChunks = `-- name: GetResourceNodesInChunks :many
SELECT
  rn.id, rn.resource_node_type_id, rn.world_id, rn.chunk_x, rn.chunk_y, rn.cluster_id, rn.x, rn.y, rn.size, rn.created_at
FROM resource_nodes rn
WHERE rn.world_id = $1 AND (
      (rn.chunk_x = $2 AND rn.chunk_y = $3) OR
      (rn.chunk_x = $4 AND rn.chunk_y = $5) OR
      (rn.chunk_x = $6 AND rn.chunk_y = $7) OR
      (rn.chunk_x = $8 AND rn.chunk_y = $9) OR
      (rn.chunk_x = $10 AND rn.chunk_y = $11)
)
`

type GetResourceNodesInChunksParams struct {
	WorldID  pgtype.UUID
	ChunkX   int32
	ChunkY   int32
	ChunkX_2 int32
	ChunkY_2 int32
	ChunkX_3 int32
	ChunkY_3 int32
	ChunkX_4 int32
	ChunkY_4 int32
	ChunkX_5 int32
	ChunkY_5 int32
}

func (q *Queries) GetResourceNodesInChunks(ctx context.Context, arg GetResourceNodesInChunksParams) ([]ResourceNode, error) {
	rows, err := q.db.Query(ctx, getResourceNodesInChunks,
		arg.WorldID,
		arg.ChunkX,
		arg.ChunkY,
		arg.ChunkX_2,
		arg.ChunkY_2,
		arg.ChunkX_3,
		arg.ChunkY_3,
		arg.ChunkX_4,
		arg.ChunkY_4,
		arg.ChunkX_5,
		arg.ChunkY_5,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceNode
	for rows.Next() {
		var i ResourceNode
		if err := rows.Scan(
			&i.ID,
			&i.ResourceNodeTypeID,
			&i.WorldID,
			&i.ChunkX,
			&i.ChunkY,
			&i.ClusterID,
			&i.X,
			&i.Y,
			&i.Size,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourceNodesInCluster = `-- name: GetResourceNodesInCluster :many
SELECT
  rn.id, rn.resource_node_type_id, rn.world_id, rn.chunk_x, rn.chunk_y, rn.cluster_id, rn.x, rn.y, rn.size, rn.created_at
FROM resource_nodes rn
WHERE rn.cluster_id = $1
`

func (q *Queries) GetResourceNodesInCluster(ctx context.Context, clusterID string) ([]ResourceNode, error) {
	rows, err := q.db.Query(ctx, getResourceNodesInCluster, clusterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceNode
	for rows.Next() {
		var i ResourceNode
		if err := rows.Scan(
			&i.ID,
			&i.ResourceNodeTypeID,
			&i.WorldID,
			&i.ChunkX,
			&i.ChunkY,
			&i.ClusterID,
			&i.X,
			&i.Y,
			&i.Size,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resourceNodeExistsAtPosition = `-- name: ResourceNodeExistsAtPosition :one
SELECT EXISTS(
  SELECT 1 FROM resource_nodes
  WHERE world_id = $1 AND x = $2 AND y = $3
)
`

type ResourceNodeExistsAtPositionParams struct {
	WorldID pgtype.UUID
	X       int32
	Y       int32
}

func (q *Queries) ResourceNodeExistsAtPosition(ctx context.Context, arg ResourceNodeExistsAtPositionParams) (bool, error) {
	row := q.db.QueryRow(ctx, resourceNodeExistsAtPosition, arg.WorldID, arg.X, arg.Y)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
