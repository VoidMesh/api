// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.world_settings.sql

package db

import (
	"context"
)

const getAllWorldSettings = `-- name: GetAllWorldSettings :many
SELECT key, value FROM world_settings
ORDER BY key
`

func (q *Queries) GetAllWorldSettings(ctx context.Context) ([]WorldSetting, error) {
	rows, err := q.db.Query(ctx, getAllWorldSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorldSetting
	for rows.Next() {
		var i WorldSetting
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorldSetting = `-- name: GetWorldSetting :one
SELECT key, value FROM world_settings
WHERE key = $1
`

func (q *Queries) GetWorldSetting(ctx context.Context, key string) (WorldSetting, error) {
	row := q.db.QueryRow(ctx, getWorldSetting, key)
	var i WorldSetting
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const setWorldSetting = `-- name: SetWorldSetting :one
INSERT INTO world_settings (key, value)
VALUES ($1, $2)
ON CONFLICT (key) DO UPDATE SET value = $2
RETURNING key, value
`

type SetWorldSettingParams struct {
	Key   string
	Value string
}

func (q *Queries) SetWorldSetting(ctx context.Context, arg SetWorldSettingParams) (WorldSetting, error) {
	row := q.db.QueryRow(ctx, setWorldSetting, arg.Key, arg.Value)
	var i WorldSetting
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}
