// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: resource_node/v1/resource_node.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResourceNodeService_GetResourcesInChunk_FullMethodName  = "/resource_node.v1.ResourceNodeService/GetResourcesInChunk"
	ResourceNodeService_GetResourcesInChunks_FullMethodName = "/resource_node.v1.ResourceNodeService/GetResourcesInChunks"
	ResourceNodeService_GetResourceNodeTypes_FullMethodName = "/resource_node.v1.ResourceNodeService/GetResourceNodeTypes"
)

// ResourceNodeServiceClient is the client API for ResourceNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Resource node related messages and services
type ResourceNodeServiceClient interface {
	// Resource node discovery operations
	GetResourcesInChunk(ctx context.Context, in *GetResourcesInChunkRequest, opts ...grpc.CallOption) (*GetResourcesInChunkResponse, error)
	GetResourcesInChunks(ctx context.Context, in *GetResourcesInChunksRequest, opts ...grpc.CallOption) (*GetResourcesInChunksResponse, error)
	// Resource node type information
	GetResourceNodeTypes(ctx context.Context, in *GetResourceNodeTypesRequest, opts ...grpc.CallOption) (*GetResourceNodeTypesResponse, error)
}

type resourceNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceNodeServiceClient(cc grpc.ClientConnInterface) ResourceNodeServiceClient {
	return &resourceNodeServiceClient{cc}
}

func (c *resourceNodeServiceClient) GetResourcesInChunk(ctx context.Context, in *GetResourcesInChunkRequest, opts ...grpc.CallOption) (*GetResourcesInChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourcesInChunkResponse)
	err := c.cc.Invoke(ctx, ResourceNodeService_GetResourcesInChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceNodeServiceClient) GetResourcesInChunks(ctx context.Context, in *GetResourcesInChunksRequest, opts ...grpc.CallOption) (*GetResourcesInChunksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourcesInChunksResponse)
	err := c.cc.Invoke(ctx, ResourceNodeService_GetResourcesInChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceNodeServiceClient) GetResourceNodeTypes(ctx context.Context, in *GetResourceNodeTypesRequest, opts ...grpc.CallOption) (*GetResourceNodeTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceNodeTypesResponse)
	err := c.cc.Invoke(ctx, ResourceNodeService_GetResourceNodeTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceNodeServiceServer is the server API for ResourceNodeService service.
// All implementations must embed UnimplementedResourceNodeServiceServer
// for forward compatibility.
//
// Resource node related messages and services
type ResourceNodeServiceServer interface {
	// Resource node discovery operations
	GetResourcesInChunk(context.Context, *GetResourcesInChunkRequest) (*GetResourcesInChunkResponse, error)
	GetResourcesInChunks(context.Context, *GetResourcesInChunksRequest) (*GetResourcesInChunksResponse, error)
	// Resource node type information
	GetResourceNodeTypes(context.Context, *GetResourceNodeTypesRequest) (*GetResourceNodeTypesResponse, error)
	mustEmbedUnimplementedResourceNodeServiceServer()
}

// UnimplementedResourceNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceNodeServiceServer struct{}

func (UnimplementedResourceNodeServiceServer) GetResourcesInChunk(context.Context, *GetResourcesInChunkRequest) (*GetResourcesInChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcesInChunk not implemented")
}
func (UnimplementedResourceNodeServiceServer) GetResourcesInChunks(context.Context, *GetResourcesInChunksRequest) (*GetResourcesInChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcesInChunks not implemented")
}
func (UnimplementedResourceNodeServiceServer) GetResourceNodeTypes(context.Context, *GetResourceNodeTypesRequest) (*GetResourceNodeTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceNodeTypes not implemented")
}
func (UnimplementedResourceNodeServiceServer) mustEmbedUnimplementedResourceNodeServiceServer() {}
func (UnimplementedResourceNodeServiceServer) testEmbeddedByValue()                             {}

// UnsafeResourceNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceNodeServiceServer will
// result in compilation errors.
type UnsafeResourceNodeServiceServer interface {
	mustEmbedUnimplementedResourceNodeServiceServer()
}

func RegisterResourceNodeServiceServer(s grpc.ServiceRegistrar, srv ResourceNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourceNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourceNodeService_ServiceDesc, srv)
}

func _ResourceNodeService_GetResourcesInChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesInChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceNodeServiceServer).GetResourcesInChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceNodeService_GetResourcesInChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceNodeServiceServer).GetResourcesInChunk(ctx, req.(*GetResourcesInChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceNodeService_GetResourcesInChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesInChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceNodeServiceServer).GetResourcesInChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceNodeService_GetResourcesInChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceNodeServiceServer).GetResourcesInChunks(ctx, req.(*GetResourcesInChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceNodeService_GetResourceNodeTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceNodeTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceNodeServiceServer).GetResourceNodeTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceNodeService_GetResourceNodeTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceNodeServiceServer).GetResourceNodeTypes(ctx, req.(*GetResourceNodeTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceNodeService_ServiceDesc is the grpc.ServiceDesc for ResourceNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource_node.v1.ResourceNodeService",
	HandlerType: (*ResourceNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResourcesInChunk",
			Handler:    _ResourceNodeService_GetResourcesInChunk_Handler,
		},
		{
			MethodName: "GetResourcesInChunks",
			Handler:    _ResourceNodeService_GetResourcesInChunks_Handler,
		},
		{
			MethodName: "GetResourceNodeTypes",
			Handler:    _ResourceNodeService_GetResourceNodeTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_node/v1/resource_node.proto",
}
