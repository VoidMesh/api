// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: meow/v1/meow.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeowService_CreateMeow_FullMethodName = "/meow.v1.MeowService/CreateMeow"
	MeowService_GetMeow_FullMethodName    = "/meow.v1.MeowService/GetMeow"
	MeowService_IndexMeow_FullMethodName  = "/meow.v1.MeowService/IndexMeow"
)

// MeowServiceClient is the client API for MeowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeowServiceClient interface {
	CreateMeow(ctx context.Context, in *CreateMeowRequest, opts ...grpc.CallOption) (*CreateMeowResponse, error)
	GetMeow(ctx context.Context, in *GetMeowRequest, opts ...grpc.CallOption) (*GetMeowResponse, error)
	IndexMeow(ctx context.Context, in *IndexMeowRequest, opts ...grpc.CallOption) (*IndexMeowResponse, error)
}

type meowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeowServiceClient(cc grpc.ClientConnInterface) MeowServiceClient {
	return &meowServiceClient{cc}
}

func (c *meowServiceClient) CreateMeow(ctx context.Context, in *CreateMeowRequest, opts ...grpc.CallOption) (*CreateMeowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeowResponse)
	err := c.cc.Invoke(ctx, MeowService_CreateMeow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meowServiceClient) GetMeow(ctx context.Context, in *GetMeowRequest, opts ...grpc.CallOption) (*GetMeowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMeowResponse)
	err := c.cc.Invoke(ctx, MeowService_GetMeow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meowServiceClient) IndexMeow(ctx context.Context, in *IndexMeowRequest, opts ...grpc.CallOption) (*IndexMeowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexMeowResponse)
	err := c.cc.Invoke(ctx, MeowService_IndexMeow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeowServiceServer is the server API for MeowService service.
// All implementations must embed UnimplementedMeowServiceServer
// for forward compatibility.
type MeowServiceServer interface {
	CreateMeow(context.Context, *CreateMeowRequest) (*CreateMeowResponse, error)
	GetMeow(context.Context, *GetMeowRequest) (*GetMeowResponse, error)
	IndexMeow(context.Context, *IndexMeowRequest) (*IndexMeowResponse, error)
	mustEmbedUnimplementedMeowServiceServer()
}

// UnimplementedMeowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeowServiceServer struct{}

func (UnimplementedMeowServiceServer) CreateMeow(context.Context, *CreateMeowRequest) (*CreateMeowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeow not implemented")
}
func (UnimplementedMeowServiceServer) GetMeow(context.Context, *GetMeowRequest) (*GetMeowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeow not implemented")
}
func (UnimplementedMeowServiceServer) IndexMeow(context.Context, *IndexMeowRequest) (*IndexMeowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexMeow not implemented")
}
func (UnimplementedMeowServiceServer) mustEmbedUnimplementedMeowServiceServer() {}
func (UnimplementedMeowServiceServer) testEmbeddedByValue()                     {}

// UnsafeMeowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeowServiceServer will
// result in compilation errors.
type UnsafeMeowServiceServer interface {
	mustEmbedUnimplementedMeowServiceServer()
}

func RegisterMeowServiceServer(s grpc.ServiceRegistrar, srv MeowServiceServer) {
	// If the following call pancis, it indicates UnimplementedMeowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeowService_ServiceDesc, srv)
}

func _MeowService_CreateMeow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeowServiceServer).CreateMeow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeowService_CreateMeow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeowServiceServer).CreateMeow(ctx, req.(*CreateMeowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeowService_GetMeow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeowServiceServer).GetMeow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeowService_GetMeow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeowServiceServer).GetMeow(ctx, req.(*GetMeowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeowService_IndexMeow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexMeowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeowServiceServer).IndexMeow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeowService_IndexMeow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeowServiceServer).IndexMeow(ctx, req.(*IndexMeowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeowService_ServiceDesc is the grpc.ServiceDesc for MeowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meow.v1.MeowService",
	HandlerType: (*MeowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMeow",
			Handler:    _MeowService_CreateMeow_Handler,
		},
		{
			MethodName: "GetMeow",
			Handler:    _MeowService_GetMeow_Handler,
		},
		{
			MethodName: "IndexMeow",
			Handler:    _MeowService_IndexMeow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meow/v1/meow.proto",
}
