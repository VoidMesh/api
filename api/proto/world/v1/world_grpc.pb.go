// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: world/v1/world.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorldService_GetWorld_FullMethodName        = "/world.v1.WorldService/GetWorld"
	WorldService_GetDefaultWorld_FullMethodName = "/world.v1.WorldService/GetDefaultWorld"
	WorldService_ListWorlds_FullMethodName      = "/world.v1.WorldService/ListWorlds"
	WorldService_UpdateWorldName_FullMethodName = "/world.v1.WorldService/UpdateWorldName"
	WorldService_DeleteWorld_FullMethodName     = "/world.v1.WorldService/DeleteWorld"
)

// WorldServiceClient is the client API for WorldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WorldService provides operations for managing worlds
type WorldServiceClient interface {
	// GetWorld retrieves a world by ID
	GetWorld(ctx context.Context, in *GetWorldRequest, opts ...grpc.CallOption) (*GetWorldResponse, error)
	// GetDefaultWorld retrieves the default world
	GetDefaultWorld(ctx context.Context, in *GetDefaultWorldRequest, opts ...grpc.CallOption) (*GetDefaultWorldResponse, error)
	// ListWorlds retrieves all worlds
	ListWorlds(ctx context.Context, in *ListWorldsRequest, opts ...grpc.CallOption) (*ListWorldsResponse, error)
	// UpdateWorldName updates a world s name
	UpdateWorldName(ctx context.Context, in *UpdateWorldNameRequest, opts ...grpc.CallOption) (*UpdateWorldNameResponse, error)
	// DeleteWorld deletes a world
	DeleteWorld(ctx context.Context, in *DeleteWorldRequest, opts ...grpc.CallOption) (*DeleteWorldResponse, error)
}

type worldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldServiceClient(cc grpc.ClientConnInterface) WorldServiceClient {
	return &worldServiceClient{cc}
}

func (c *worldServiceClient) GetWorld(ctx context.Context, in *GetWorldRequest, opts ...grpc.CallOption) (*GetWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorldResponse)
	err := c.cc.Invoke(ctx, WorldService_GetWorld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServiceClient) GetDefaultWorld(ctx context.Context, in *GetDefaultWorldRequest, opts ...grpc.CallOption) (*GetDefaultWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefaultWorldResponse)
	err := c.cc.Invoke(ctx, WorldService_GetDefaultWorld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServiceClient) ListWorlds(ctx context.Context, in *ListWorldsRequest, opts ...grpc.CallOption) (*ListWorldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorldsResponse)
	err := c.cc.Invoke(ctx, WorldService_ListWorlds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServiceClient) UpdateWorldName(ctx context.Context, in *UpdateWorldNameRequest, opts ...grpc.CallOption) (*UpdateWorldNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorldNameResponse)
	err := c.cc.Invoke(ctx, WorldService_UpdateWorldName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServiceClient) DeleteWorld(ctx context.Context, in *DeleteWorldRequest, opts ...grpc.CallOption) (*DeleteWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWorldResponse)
	err := c.cc.Invoke(ctx, WorldService_DeleteWorld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldServiceServer is the server API for WorldService service.
// All implementations must embed UnimplementedWorldServiceServer
// for forward compatibility.
//
// WorldService provides operations for managing worlds
type WorldServiceServer interface {
	// GetWorld retrieves a world by ID
	GetWorld(context.Context, *GetWorldRequest) (*GetWorldResponse, error)
	// GetDefaultWorld retrieves the default world
	GetDefaultWorld(context.Context, *GetDefaultWorldRequest) (*GetDefaultWorldResponse, error)
	// ListWorlds retrieves all worlds
	ListWorlds(context.Context, *ListWorldsRequest) (*ListWorldsResponse, error)
	// UpdateWorldName updates a world s name
	UpdateWorldName(context.Context, *UpdateWorldNameRequest) (*UpdateWorldNameResponse, error)
	// DeleteWorld deletes a world
	DeleteWorld(context.Context, *DeleteWorldRequest) (*DeleteWorldResponse, error)
	mustEmbedUnimplementedWorldServiceServer()
}

// UnimplementedWorldServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorldServiceServer struct{}

func (UnimplementedWorldServiceServer) GetWorld(context.Context, *GetWorldRequest) (*GetWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorld not implemented")
}
func (UnimplementedWorldServiceServer) GetDefaultWorld(context.Context, *GetDefaultWorldRequest) (*GetDefaultWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultWorld not implemented")
}
func (UnimplementedWorldServiceServer) ListWorlds(context.Context, *ListWorldsRequest) (*ListWorldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorlds not implemented")
}
func (UnimplementedWorldServiceServer) UpdateWorldName(context.Context, *UpdateWorldNameRequest) (*UpdateWorldNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorldName not implemented")
}
func (UnimplementedWorldServiceServer) DeleteWorld(context.Context, *DeleteWorldRequest) (*DeleteWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorld not implemented")
}
func (UnimplementedWorldServiceServer) mustEmbedUnimplementedWorldServiceServer() {}
func (UnimplementedWorldServiceServer) testEmbeddedByValue()                      {}

// UnsafeWorldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorldServiceServer will
// result in compilation errors.
type UnsafeWorldServiceServer interface {
	mustEmbedUnimplementedWorldServiceServer()
}

func RegisterWorldServiceServer(s grpc.ServiceRegistrar, srv WorldServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorldServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorldService_ServiceDesc, srv)
}

func _WorldService_GetWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).GetWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldService_GetWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).GetWorld(ctx, req.(*GetWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldService_GetDefaultWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).GetDefaultWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldService_GetDefaultWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).GetDefaultWorld(ctx, req.(*GetDefaultWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldService_ListWorlds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).ListWorlds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldService_ListWorlds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).ListWorlds(ctx, req.(*ListWorldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldService_UpdateWorldName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorldNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).UpdateWorldName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldService_UpdateWorldName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).UpdateWorldName(ctx, req.(*UpdateWorldNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldService_DeleteWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).DeleteWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldService_DeleteWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).DeleteWorld(ctx, req.(*DeleteWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorldService_ServiceDesc is the grpc.ServiceDesc for WorldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "world.v1.WorldService",
	HandlerType: (*WorldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorld",
			Handler:    _WorldService_GetWorld_Handler,
		},
		{
			MethodName: "GetDefaultWorld",
			Handler:    _WorldService_GetDefaultWorld_Handler,
		},
		{
			MethodName: "ListWorlds",
			Handler:    _WorldService_ListWorlds_Handler,
		},
		{
			MethodName: "UpdateWorldName",
			Handler:    _WorldService_UpdateWorldName_Handler,
		},
		{
			MethodName: "DeleteWorld",
			Handler:    _WorldService_DeleteWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "world/v1/world.proto",
}
