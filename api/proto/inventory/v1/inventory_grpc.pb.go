// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: inventory/v1/inventory.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_GetCharacterInventory_FullMethodName = "/inventory.v1.InventoryService/GetCharacterInventory"
	InventoryService_HarvestResourceNode_FullMethodName   = "/inventory.v1.InventoryService/HarvestResourceNode"
	InventoryService_AddInventoryItem_FullMethodName      = "/inventory.v1.InventoryService/AddInventoryItem"
	InventoryService_RemoveInventoryItem_FullMethodName   = "/inventory.v1.InventoryService/RemoveInventoryItem"
	InventoryService_UpdateItemQuantity_FullMethodName    = "/inventory.v1.InventoryService/UpdateItemQuantity"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	// Inventory management
	GetCharacterInventory(ctx context.Context, in *GetCharacterInventoryRequest, opts ...grpc.CallOption) (*GetCharacterInventoryResponse, error)
	// Resource harvesting
	HarvestResourceNode(ctx context.Context, in *HarvestResourceNodeRequest, opts ...grpc.CallOption) (*HarvestResourceNodeResponse, error)
	// Item management
	AddInventoryItem(ctx context.Context, in *AddInventoryItemRequest, opts ...grpc.CallOption) (*AddInventoryItemResponse, error)
	RemoveInventoryItem(ctx context.Context, in *RemoveInventoryItemRequest, opts ...grpc.CallOption) (*RemoveInventoryItemResponse, error)
	UpdateItemQuantity(ctx context.Context, in *UpdateItemQuantityRequest, opts ...grpc.CallOption) (*UpdateItemQuantityResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) GetCharacterInventory(ctx context.Context, in *GetCharacterInventoryRequest, opts ...grpc.CallOption) (*GetCharacterInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCharacterInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetCharacterInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) HarvestResourceNode(ctx context.Context, in *HarvestResourceNodeRequest, opts ...grpc.CallOption) (*HarvestResourceNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HarvestResourceNodeResponse)
	err := c.cc.Invoke(ctx, InventoryService_HarvestResourceNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AddInventoryItem(ctx context.Context, in *AddInventoryItemRequest, opts ...grpc.CallOption) (*AddInventoryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddInventoryItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_AddInventoryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) RemoveInventoryItem(ctx context.Context, in *RemoveInventoryItemRequest, opts ...grpc.CallOption) (*RemoveInventoryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveInventoryItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_RemoveInventoryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateItemQuantity(ctx context.Context, in *UpdateItemQuantityRequest, opts ...grpc.CallOption) (*UpdateItemQuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateItemQuantityResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateItemQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	// Inventory management
	GetCharacterInventory(context.Context, *GetCharacterInventoryRequest) (*GetCharacterInventoryResponse, error)
	// Resource harvesting
	HarvestResourceNode(context.Context, *HarvestResourceNodeRequest) (*HarvestResourceNodeResponse, error)
	// Item management
	AddInventoryItem(context.Context, *AddInventoryItemRequest) (*AddInventoryItemResponse, error)
	RemoveInventoryItem(context.Context, *RemoveInventoryItemRequest) (*RemoveInventoryItemResponse, error)
	UpdateItemQuantity(context.Context, *UpdateItemQuantityRequest) (*UpdateItemQuantityResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) GetCharacterInventory(context.Context, *GetCharacterInventoryRequest) (*GetCharacterInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacterInventory not implemented")
}
func (UnimplementedInventoryServiceServer) HarvestResourceNode(context.Context, *HarvestResourceNodeRequest) (*HarvestResourceNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HarvestResourceNode not implemented")
}
func (UnimplementedInventoryServiceServer) AddInventoryItem(context.Context, *AddInventoryItemRequest) (*AddInventoryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInventoryItem not implemented")
}
func (UnimplementedInventoryServiceServer) RemoveInventoryItem(context.Context, *RemoveInventoryItemRequest) (*RemoveInventoryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInventoryItem not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateItemQuantity(context.Context, *UpdateItemQuantityRequest) (*UpdateItemQuantityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemQuantity not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_GetCharacterInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetCharacterInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetCharacterInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetCharacterInventory(ctx, req.(*GetCharacterInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_HarvestResourceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HarvestResourceNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).HarvestResourceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_HarvestResourceNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).HarvestResourceNode(ctx, req.(*HarvestResourceNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AddInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddInventoryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddInventoryItem(ctx, req.(*AddInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_RemoveInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).RemoveInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_RemoveInventoryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).RemoveInventoryItem(ctx, req.(*RemoveInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateItemQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateItemQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateItemQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateItemQuantity(ctx, req.(*UpdateItemQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.v1.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCharacterInventory",
			Handler:    _InventoryService_GetCharacterInventory_Handler,
		},
		{
			MethodName: "HarvestResourceNode",
			Handler:    _InventoryService_HarvestResourceNode_Handler,
		},
		{
			MethodName: "AddInventoryItem",
			Handler:    _InventoryService_AddInventoryItem_Handler,
		},
		{
			MethodName: "RemoveInventoryItem",
			Handler:    _InventoryService_RemoveInventoryItem_Handler,
		},
		{
			MethodName: "UpdateItemQuantity",
			Handler:    _InventoryService_UpdateItemQuantity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory/v1/inventory.proto",
}
