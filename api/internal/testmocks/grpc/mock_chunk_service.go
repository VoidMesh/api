// Code generated by MockGen. DO NOT EDIT.
// Source: /home/alyx/code/VoidMesh/api/api/proto/chunk/v1/chunk_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/alyx/code/VoidMesh/api/api/proto/chunk/v1/chunk_grpc.pb.go -destination=/home/alyx/code/VoidMesh/api/api/internal/testmocks/grpc/mock_chunk_service.go -package=mockgrpc
//

// Package mockgrpc is a generated GoMock package.
package mockgrpc

import (
	context "context"
	reflect "reflect"

	v1 "github.com/VoidMesh/api/api/proto/chunk/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockChunkServiceClient is a mock of ChunkServiceClient interface.
type MockChunkServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockChunkServiceClientMockRecorder
	isgomock struct{}
}

// MockChunkServiceClientMockRecorder is the mock recorder for MockChunkServiceClient.
type MockChunkServiceClientMockRecorder struct {
	mock *MockChunkServiceClient
}

// NewMockChunkServiceClient creates a new mock instance.
func NewMockChunkServiceClient(ctrl *gomock.Controller) *MockChunkServiceClient {
	mock := &MockChunkServiceClient{ctrl: ctrl}
	mock.recorder = &MockChunkServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChunkServiceClient) EXPECT() *MockChunkServiceClientMockRecorder {
	return m.recorder
}

// GetChunk mocks base method.
func (m *MockChunkServiceClient) GetChunk(ctx context.Context, in *v1.GetChunkRequest, opts ...grpc.CallOption) (*v1.GetChunkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChunk", varargs...)
	ret0, _ := ret[0].(*v1.GetChunkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunk indicates an expected call of GetChunk.
func (mr *MockChunkServiceClientMockRecorder) GetChunk(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunk", reflect.TypeOf((*MockChunkServiceClient)(nil).GetChunk), varargs...)
}

// GetChunks mocks base method.
func (m *MockChunkServiceClient) GetChunks(ctx context.Context, in *v1.GetChunksRequest, opts ...grpc.CallOption) (*v1.GetChunksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChunks", varargs...)
	ret0, _ := ret[0].(*v1.GetChunksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunks indicates an expected call of GetChunks.
func (mr *MockChunkServiceClientMockRecorder) GetChunks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunks", reflect.TypeOf((*MockChunkServiceClient)(nil).GetChunks), varargs...)
}

// GetChunksInRadius mocks base method.
func (m *MockChunkServiceClient) GetChunksInRadius(ctx context.Context, in *v1.GetChunksInRadiusRequest, opts ...grpc.CallOption) (*v1.GetChunksInRadiusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChunksInRadius", varargs...)
	ret0, _ := ret[0].(*v1.GetChunksInRadiusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunksInRadius indicates an expected call of GetChunksInRadius.
func (mr *MockChunkServiceClientMockRecorder) GetChunksInRadius(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunksInRadius", reflect.TypeOf((*MockChunkServiceClient)(nil).GetChunksInRadius), varargs...)
}

// MockChunkServiceServer is a mock of ChunkServiceServer interface.
type MockChunkServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockChunkServiceServerMockRecorder
	isgomock struct{}
}

// MockChunkServiceServerMockRecorder is the mock recorder for MockChunkServiceServer.
type MockChunkServiceServerMockRecorder struct {
	mock *MockChunkServiceServer
}

// NewMockChunkServiceServer creates a new mock instance.
func NewMockChunkServiceServer(ctrl *gomock.Controller) *MockChunkServiceServer {
	mock := &MockChunkServiceServer{ctrl: ctrl}
	mock.recorder = &MockChunkServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChunkServiceServer) EXPECT() *MockChunkServiceServerMockRecorder {
	return m.recorder
}

// GetChunk mocks base method.
func (m *MockChunkServiceServer) GetChunk(arg0 context.Context, arg1 *v1.GetChunkRequest) (*v1.GetChunkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunk", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetChunkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunk indicates an expected call of GetChunk.
func (mr *MockChunkServiceServerMockRecorder) GetChunk(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunk", reflect.TypeOf((*MockChunkServiceServer)(nil).GetChunk), arg0, arg1)
}

// GetChunks mocks base method.
func (m *MockChunkServiceServer) GetChunks(arg0 context.Context, arg1 *v1.GetChunksRequest) (*v1.GetChunksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunks", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetChunksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunks indicates an expected call of GetChunks.
func (mr *MockChunkServiceServerMockRecorder) GetChunks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunks", reflect.TypeOf((*MockChunkServiceServer)(nil).GetChunks), arg0, arg1)
}

// GetChunksInRadius mocks base method.
func (m *MockChunkServiceServer) GetChunksInRadius(arg0 context.Context, arg1 *v1.GetChunksInRadiusRequest) (*v1.GetChunksInRadiusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunksInRadius", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetChunksInRadiusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunksInRadius indicates an expected call of GetChunksInRadius.
func (mr *MockChunkServiceServerMockRecorder) GetChunksInRadius(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunksInRadius", reflect.TypeOf((*MockChunkServiceServer)(nil).GetChunksInRadius), arg0, arg1)
}

// mustEmbedUnimplementedChunkServiceServer mocks base method.
func (m *MockChunkServiceServer) mustEmbedUnimplementedChunkServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedChunkServiceServer")
}

// mustEmbedUnimplementedChunkServiceServer indicates an expected call of mustEmbedUnimplementedChunkServiceServer.
func (mr *MockChunkServiceServerMockRecorder) mustEmbedUnimplementedChunkServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedChunkServiceServer", reflect.TypeOf((*MockChunkServiceServer)(nil).mustEmbedUnimplementedChunkServiceServer))
}

// MockUnsafeChunkServiceServer is a mock of UnsafeChunkServiceServer interface.
type MockUnsafeChunkServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeChunkServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeChunkServiceServerMockRecorder is the mock recorder for MockUnsafeChunkServiceServer.
type MockUnsafeChunkServiceServerMockRecorder struct {
	mock *MockUnsafeChunkServiceServer
}

// NewMockUnsafeChunkServiceServer creates a new mock instance.
func NewMockUnsafeChunkServiceServer(ctrl *gomock.Controller) *MockUnsafeChunkServiceServer {
	mock := &MockUnsafeChunkServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeChunkServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeChunkServiceServer) EXPECT() *MockUnsafeChunkServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedChunkServiceServer mocks base method.
func (m *MockUnsafeChunkServiceServer) mustEmbedUnimplementedChunkServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedChunkServiceServer")
}

// mustEmbedUnimplementedChunkServiceServer indicates an expected call of mustEmbedUnimplementedChunkServiceServer.
func (mr *MockUnsafeChunkServiceServerMockRecorder) mustEmbedUnimplementedChunkServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedChunkServiceServer", reflect.TypeOf((*MockUnsafeChunkServiceServer)(nil).mustEmbedUnimplementedChunkServiceServer))
}
