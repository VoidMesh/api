// Code generated by MockGen. DO NOT EDIT.
// Source: /home/alyx/code/VoidMesh/api/api/proto/character/v1/character_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/alyx/code/VoidMesh/api/api/proto/character/v1/character_grpc.pb.go -destination=/home/alyx/code/VoidMesh/api/api/internal/testmocks/grpc/mock_character_service.go -package=mockgrpc
//

// Package mockgrpc is a generated GoMock package.
package mockgrpc

import (
	context "context"
	reflect "reflect"

	v1 "github.com/VoidMesh/api/api/proto/character/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCharacterServiceClient is a mock of CharacterServiceClient interface.
type MockCharacterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterServiceClientMockRecorder
	isgomock struct{}
}

// MockCharacterServiceClientMockRecorder is the mock recorder for MockCharacterServiceClient.
type MockCharacterServiceClientMockRecorder struct {
	mock *MockCharacterServiceClient
}

// NewMockCharacterServiceClient creates a new mock instance.
func NewMockCharacterServiceClient(ctrl *gomock.Controller) *MockCharacterServiceClient {
	mock := &MockCharacterServiceClient{ctrl: ctrl}
	mock.recorder = &MockCharacterServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacterServiceClient) EXPECT() *MockCharacterServiceClientMockRecorder {
	return m.recorder
}

// CreateCharacter mocks base method.
func (m *MockCharacterServiceClient) CreateCharacter(ctx context.Context, in *v1.CreateCharacterRequest, opts ...grpc.CallOption) (*v1.CreateCharacterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCharacter", varargs...)
	ret0, _ := ret[0].(*v1.CreateCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockCharacterServiceClientMockRecorder) CreateCharacter(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockCharacterServiceClient)(nil).CreateCharacter), varargs...)
}

// DeleteCharacter mocks base method.
func (m *MockCharacterServiceClient) DeleteCharacter(ctx context.Context, in *v1.DeleteCharacterRequest, opts ...grpc.CallOption) (*v1.DeleteCharacterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCharacter", varargs...)
	ret0, _ := ret[0].(*v1.DeleteCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCharacter indicates an expected call of DeleteCharacter.
func (mr *MockCharacterServiceClientMockRecorder) DeleteCharacter(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharacter", reflect.TypeOf((*MockCharacterServiceClient)(nil).DeleteCharacter), varargs...)
}

// GetCharacter mocks base method.
func (m *MockCharacterServiceClient) GetCharacter(ctx context.Context, in *v1.GetCharacterRequest, opts ...grpc.CallOption) (*v1.GetCharacterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCharacter", varargs...)
	ret0, _ := ret[0].(*v1.GetCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockCharacterServiceClientMockRecorder) GetCharacter(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockCharacterServiceClient)(nil).GetCharacter), varargs...)
}

// GetMyCharacters mocks base method.
func (m *MockCharacterServiceClient) GetMyCharacters(ctx context.Context, in *v1.GetMyCharactersRequest, opts ...grpc.CallOption) (*v1.GetMyCharactersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMyCharacters", varargs...)
	ret0, _ := ret[0].(*v1.GetMyCharactersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyCharacters indicates an expected call of GetMyCharacters.
func (mr *MockCharacterServiceClientMockRecorder) GetMyCharacters(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyCharacters", reflect.TypeOf((*MockCharacterServiceClient)(nil).GetMyCharacters), varargs...)
}

// MoveCharacter mocks base method.
func (m *MockCharacterServiceClient) MoveCharacter(ctx context.Context, in *v1.MoveCharacterRequest, opts ...grpc.CallOption) (*v1.MoveCharacterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoveCharacter", varargs...)
	ret0, _ := ret[0].(*v1.MoveCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveCharacter indicates an expected call of MoveCharacter.
func (mr *MockCharacterServiceClientMockRecorder) MoveCharacter(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCharacter", reflect.TypeOf((*MockCharacterServiceClient)(nil).MoveCharacter), varargs...)
}

// MockCharacterServiceServer is a mock of CharacterServiceServer interface.
type MockCharacterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterServiceServerMockRecorder
	isgomock struct{}
}

// MockCharacterServiceServerMockRecorder is the mock recorder for MockCharacterServiceServer.
type MockCharacterServiceServerMockRecorder struct {
	mock *MockCharacterServiceServer
}

// NewMockCharacterServiceServer creates a new mock instance.
func NewMockCharacterServiceServer(ctrl *gomock.Controller) *MockCharacterServiceServer {
	mock := &MockCharacterServiceServer{ctrl: ctrl}
	mock.recorder = &MockCharacterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacterServiceServer) EXPECT() *MockCharacterServiceServerMockRecorder {
	return m.recorder
}

// CreateCharacter mocks base method.
func (m *MockCharacterServiceServer) CreateCharacter(arg0 context.Context, arg1 *v1.CreateCharacterRequest) (*v1.CreateCharacterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharacter", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockCharacterServiceServerMockRecorder) CreateCharacter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockCharacterServiceServer)(nil).CreateCharacter), arg0, arg1)
}

// DeleteCharacter mocks base method.
func (m *MockCharacterServiceServer) DeleteCharacter(arg0 context.Context, arg1 *v1.DeleteCharacterRequest) (*v1.DeleteCharacterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCharacter", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCharacter indicates an expected call of DeleteCharacter.
func (mr *MockCharacterServiceServerMockRecorder) DeleteCharacter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharacter", reflect.TypeOf((*MockCharacterServiceServer)(nil).DeleteCharacter), arg0, arg1)
}

// GetCharacter mocks base method.
func (m *MockCharacterServiceServer) GetCharacter(arg0 context.Context, arg1 *v1.GetCharacterRequest) (*v1.GetCharacterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockCharacterServiceServerMockRecorder) GetCharacter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockCharacterServiceServer)(nil).GetCharacter), arg0, arg1)
}

// GetMyCharacters mocks base method.
func (m *MockCharacterServiceServer) GetMyCharacters(arg0 context.Context, arg1 *v1.GetMyCharactersRequest) (*v1.GetMyCharactersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyCharacters", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetMyCharactersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyCharacters indicates an expected call of GetMyCharacters.
func (mr *MockCharacterServiceServerMockRecorder) GetMyCharacters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyCharacters", reflect.TypeOf((*MockCharacterServiceServer)(nil).GetMyCharacters), arg0, arg1)
}

// MoveCharacter mocks base method.
func (m *MockCharacterServiceServer) MoveCharacter(arg0 context.Context, arg1 *v1.MoveCharacterRequest) (*v1.MoveCharacterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCharacter", arg0, arg1)
	ret0, _ := ret[0].(*v1.MoveCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveCharacter indicates an expected call of MoveCharacter.
func (mr *MockCharacterServiceServerMockRecorder) MoveCharacter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCharacter", reflect.TypeOf((*MockCharacterServiceServer)(nil).MoveCharacter), arg0, arg1)
}

// mustEmbedUnimplementedCharacterServiceServer mocks base method.
func (m *MockCharacterServiceServer) mustEmbedUnimplementedCharacterServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCharacterServiceServer")
}

// mustEmbedUnimplementedCharacterServiceServer indicates an expected call of mustEmbedUnimplementedCharacterServiceServer.
func (mr *MockCharacterServiceServerMockRecorder) mustEmbedUnimplementedCharacterServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCharacterServiceServer", reflect.TypeOf((*MockCharacterServiceServer)(nil).mustEmbedUnimplementedCharacterServiceServer))
}

// MockUnsafeCharacterServiceServer is a mock of UnsafeCharacterServiceServer interface.
type MockUnsafeCharacterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCharacterServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeCharacterServiceServerMockRecorder is the mock recorder for MockUnsafeCharacterServiceServer.
type MockUnsafeCharacterServiceServerMockRecorder struct {
	mock *MockUnsafeCharacterServiceServer
}

// NewMockUnsafeCharacterServiceServer creates a new mock instance.
func NewMockUnsafeCharacterServiceServer(ctrl *gomock.Controller) *MockUnsafeCharacterServiceServer {
	mock := &MockUnsafeCharacterServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCharacterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCharacterServiceServer) EXPECT() *MockUnsafeCharacterServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCharacterServiceServer mocks base method.
func (m *MockUnsafeCharacterServiceServer) mustEmbedUnimplementedCharacterServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCharacterServiceServer")
}

// mustEmbedUnimplementedCharacterServiceServer indicates an expected call of mustEmbedUnimplementedCharacterServiceServer.
func (mr *MockUnsafeCharacterServiceServerMockRecorder) mustEmbedUnimplementedCharacterServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCharacterServiceServer", reflect.TypeOf((*MockUnsafeCharacterServiceServer)(nil).mustEmbedUnimplementedCharacterServiceServer))
}
