// Code generated by MockGen. DO NOT EDIT.
// Source: /home/alyx/code/VoidMesh/api/api/proto/world/v1/world_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/alyx/code/VoidMesh/api/api/proto/world/v1/world_grpc.pb.go -destination=/home/alyx/code/VoidMesh/api/api/internal/testmocks/grpc/mock_world_service.go -package=mockgrpc
//

// Package mockgrpc is a generated GoMock package.
package mockgrpc

import (
	context "context"
	reflect "reflect"

	v1 "github.com/VoidMesh/api/api/proto/world/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockWorldServiceClient is a mock of WorldServiceClient interface.
type MockWorldServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorldServiceClientMockRecorder
	isgomock struct{}
}

// MockWorldServiceClientMockRecorder is the mock recorder for MockWorldServiceClient.
type MockWorldServiceClientMockRecorder struct {
	mock *MockWorldServiceClient
}

// NewMockWorldServiceClient creates a new mock instance.
func NewMockWorldServiceClient(ctrl *gomock.Controller) *MockWorldServiceClient {
	mock := &MockWorldServiceClient{ctrl: ctrl}
	mock.recorder = &MockWorldServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorldServiceClient) EXPECT() *MockWorldServiceClientMockRecorder {
	return m.recorder
}

// DeleteWorld mocks base method.
func (m *MockWorldServiceClient) DeleteWorld(ctx context.Context, in *v1.DeleteWorldRequest, opts ...grpc.CallOption) (*v1.DeleteWorldResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorld", varargs...)
	ret0, _ := ret[0].(*v1.DeleteWorldResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorld indicates an expected call of DeleteWorld.
func (mr *MockWorldServiceClientMockRecorder) DeleteWorld(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorld", reflect.TypeOf((*MockWorldServiceClient)(nil).DeleteWorld), varargs...)
}

// GetDefaultWorld mocks base method.
func (m *MockWorldServiceClient) GetDefaultWorld(ctx context.Context, in *v1.GetDefaultWorldRequest, opts ...grpc.CallOption) (*v1.GetDefaultWorldResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDefaultWorld", varargs...)
	ret0, _ := ret[0].(*v1.GetDefaultWorldResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultWorld indicates an expected call of GetDefaultWorld.
func (mr *MockWorldServiceClientMockRecorder) GetDefaultWorld(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultWorld", reflect.TypeOf((*MockWorldServiceClient)(nil).GetDefaultWorld), varargs...)
}

// GetWorld mocks base method.
func (m *MockWorldServiceClient) GetWorld(ctx context.Context, in *v1.GetWorldRequest, opts ...grpc.CallOption) (*v1.GetWorldResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorld", varargs...)
	ret0, _ := ret[0].(*v1.GetWorldResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorld indicates an expected call of GetWorld.
func (mr *MockWorldServiceClientMockRecorder) GetWorld(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorld", reflect.TypeOf((*MockWorldServiceClient)(nil).GetWorld), varargs...)
}

// ListWorlds mocks base method.
func (m *MockWorldServiceClient) ListWorlds(ctx context.Context, in *v1.ListWorldsRequest, opts ...grpc.CallOption) (*v1.ListWorldsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorlds", varargs...)
	ret0, _ := ret[0].(*v1.ListWorldsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorlds indicates an expected call of ListWorlds.
func (mr *MockWorldServiceClientMockRecorder) ListWorlds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorlds", reflect.TypeOf((*MockWorldServiceClient)(nil).ListWorlds), varargs...)
}

// UpdateWorldName mocks base method.
func (m *MockWorldServiceClient) UpdateWorldName(ctx context.Context, in *v1.UpdateWorldNameRequest, opts ...grpc.CallOption) (*v1.UpdateWorldNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorldName", varargs...)
	ret0, _ := ret[0].(*v1.UpdateWorldNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorldName indicates an expected call of UpdateWorldName.
func (mr *MockWorldServiceClientMockRecorder) UpdateWorldName(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorldName", reflect.TypeOf((*MockWorldServiceClient)(nil).UpdateWorldName), varargs...)
}

// MockWorldServiceServer is a mock of WorldServiceServer interface.
type MockWorldServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockWorldServiceServerMockRecorder
	isgomock struct{}
}

// MockWorldServiceServerMockRecorder is the mock recorder for MockWorldServiceServer.
type MockWorldServiceServerMockRecorder struct {
	mock *MockWorldServiceServer
}

// NewMockWorldServiceServer creates a new mock instance.
func NewMockWorldServiceServer(ctrl *gomock.Controller) *MockWorldServiceServer {
	mock := &MockWorldServiceServer{ctrl: ctrl}
	mock.recorder = &MockWorldServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorldServiceServer) EXPECT() *MockWorldServiceServerMockRecorder {
	return m.recorder
}

// DeleteWorld mocks base method.
func (m *MockWorldServiceServer) DeleteWorld(arg0 context.Context, arg1 *v1.DeleteWorldRequest) (*v1.DeleteWorldResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorld", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteWorldResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorld indicates an expected call of DeleteWorld.
func (mr *MockWorldServiceServerMockRecorder) DeleteWorld(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorld", reflect.TypeOf((*MockWorldServiceServer)(nil).DeleteWorld), arg0, arg1)
}

// GetDefaultWorld mocks base method.
func (m *MockWorldServiceServer) GetDefaultWorld(arg0 context.Context, arg1 *v1.GetDefaultWorldRequest) (*v1.GetDefaultWorldResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultWorld", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetDefaultWorldResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultWorld indicates an expected call of GetDefaultWorld.
func (mr *MockWorldServiceServerMockRecorder) GetDefaultWorld(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultWorld", reflect.TypeOf((*MockWorldServiceServer)(nil).GetDefaultWorld), arg0, arg1)
}

// GetWorld mocks base method.
func (m *MockWorldServiceServer) GetWorld(arg0 context.Context, arg1 *v1.GetWorldRequest) (*v1.GetWorldResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorld", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetWorldResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorld indicates an expected call of GetWorld.
func (mr *MockWorldServiceServerMockRecorder) GetWorld(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorld", reflect.TypeOf((*MockWorldServiceServer)(nil).GetWorld), arg0, arg1)
}

// ListWorlds mocks base method.
func (m *MockWorldServiceServer) ListWorlds(arg0 context.Context, arg1 *v1.ListWorldsRequest) (*v1.ListWorldsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorlds", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListWorldsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorlds indicates an expected call of ListWorlds.
func (mr *MockWorldServiceServerMockRecorder) ListWorlds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorlds", reflect.TypeOf((*MockWorldServiceServer)(nil).ListWorlds), arg0, arg1)
}

// UpdateWorldName mocks base method.
func (m *MockWorldServiceServer) UpdateWorldName(arg0 context.Context, arg1 *v1.UpdateWorldNameRequest) (*v1.UpdateWorldNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorldName", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateWorldNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorldName indicates an expected call of UpdateWorldName.
func (mr *MockWorldServiceServerMockRecorder) UpdateWorldName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorldName", reflect.TypeOf((*MockWorldServiceServer)(nil).UpdateWorldName), arg0, arg1)
}

// mustEmbedUnimplementedWorldServiceServer mocks base method.
func (m *MockWorldServiceServer) mustEmbedUnimplementedWorldServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWorldServiceServer")
}

// mustEmbedUnimplementedWorldServiceServer indicates an expected call of mustEmbedUnimplementedWorldServiceServer.
func (mr *MockWorldServiceServerMockRecorder) mustEmbedUnimplementedWorldServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWorldServiceServer", reflect.TypeOf((*MockWorldServiceServer)(nil).mustEmbedUnimplementedWorldServiceServer))
}

// MockUnsafeWorldServiceServer is a mock of UnsafeWorldServiceServer interface.
type MockUnsafeWorldServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeWorldServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeWorldServiceServerMockRecorder is the mock recorder for MockUnsafeWorldServiceServer.
type MockUnsafeWorldServiceServerMockRecorder struct {
	mock *MockUnsafeWorldServiceServer
}

// NewMockUnsafeWorldServiceServer creates a new mock instance.
func NewMockUnsafeWorldServiceServer(ctrl *gomock.Controller) *MockUnsafeWorldServiceServer {
	mock := &MockUnsafeWorldServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeWorldServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeWorldServiceServer) EXPECT() *MockUnsafeWorldServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedWorldServiceServer mocks base method.
func (m *MockUnsafeWorldServiceServer) mustEmbedUnimplementedWorldServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWorldServiceServer")
}

// mustEmbedUnimplementedWorldServiceServer indicates an expected call of mustEmbedUnimplementedWorldServiceServer.
func (mr *MockUnsafeWorldServiceServerMockRecorder) mustEmbedUnimplementedWorldServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWorldServiceServer", reflect.TypeOf((*MockUnsafeWorldServiceServer)(nil).mustEmbedUnimplementedWorldServiceServer))
}
