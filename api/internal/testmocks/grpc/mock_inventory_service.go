// Code generated by MockGen. DO NOT EDIT.
// Source: /home/alyx/code/VoidMesh/api/api/proto/inventory/v1/inventory_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/alyx/code/VoidMesh/api/api/proto/inventory/v1/inventory_grpc.pb.go -destination=/home/alyx/code/VoidMesh/api/api/internal/testmocks/grpc/mock_inventory_service.go -package=mockgrpc
//

// Package mockgrpc is a generated GoMock package.
package mockgrpc

import (
	context "context"
	reflect "reflect"

	v1 "github.com/VoidMesh/api/api/proto/inventory/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockInventoryServiceClient is a mock of InventoryServiceClient interface.
type MockInventoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceClientMockRecorder
	isgomock struct{}
}

// MockInventoryServiceClientMockRecorder is the mock recorder for MockInventoryServiceClient.
type MockInventoryServiceClientMockRecorder struct {
	mock *MockInventoryServiceClient
}

// NewMockInventoryServiceClient creates a new mock instance.
func NewMockInventoryServiceClient(ctrl *gomock.Controller) *MockInventoryServiceClient {
	mock := &MockInventoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryServiceClient) EXPECT() *MockInventoryServiceClientMockRecorder {
	return m.recorder
}

// AddInventoryItem mocks base method.
func (m *MockInventoryServiceClient) AddInventoryItem(ctx context.Context, in *v1.AddInventoryItemRequest, opts ...grpc.CallOption) (*v1.AddInventoryItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddInventoryItem", varargs...)
	ret0, _ := ret[0].(*v1.AddInventoryItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInventoryItem indicates an expected call of AddInventoryItem.
func (mr *MockInventoryServiceClientMockRecorder) AddInventoryItem(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInventoryItem", reflect.TypeOf((*MockInventoryServiceClient)(nil).AddInventoryItem), varargs...)
}

// GetCharacterInventory mocks base method.
func (m *MockInventoryServiceClient) GetCharacterInventory(ctx context.Context, in *v1.GetCharacterInventoryRequest, opts ...grpc.CallOption) (*v1.GetCharacterInventoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCharacterInventory", varargs...)
	ret0, _ := ret[0].(*v1.GetCharacterInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacterInventory indicates an expected call of GetCharacterInventory.
func (mr *MockInventoryServiceClientMockRecorder) GetCharacterInventory(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterInventory", reflect.TypeOf((*MockInventoryServiceClient)(nil).GetCharacterInventory), varargs...)
}


// RemoveInventoryItem mocks base method.
func (m *MockInventoryServiceClient) RemoveInventoryItem(ctx context.Context, in *v1.RemoveInventoryItemRequest, opts ...grpc.CallOption) (*v1.RemoveInventoryItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveInventoryItem", varargs...)
	ret0, _ := ret[0].(*v1.RemoveInventoryItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveInventoryItem indicates an expected call of RemoveInventoryItem.
func (mr *MockInventoryServiceClientMockRecorder) RemoveInventoryItem(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInventoryItem", reflect.TypeOf((*MockInventoryServiceClient)(nil).RemoveInventoryItem), varargs...)
}

// UpdateItemQuantity mocks base method.
func (m *MockInventoryServiceClient) UpdateItemQuantity(ctx context.Context, in *v1.UpdateItemQuantityRequest, opts ...grpc.CallOption) (*v1.UpdateItemQuantityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItemQuantity", varargs...)
	ret0, _ := ret[0].(*v1.UpdateItemQuantityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemQuantity indicates an expected call of UpdateItemQuantity.
func (mr *MockInventoryServiceClientMockRecorder) UpdateItemQuantity(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemQuantity", reflect.TypeOf((*MockInventoryServiceClient)(nil).UpdateItemQuantity), varargs...)
}

// MockInventoryServiceServer is a mock of InventoryServiceServer interface.
type MockInventoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceServerMockRecorder
	isgomock struct{}
}

// MockInventoryServiceServerMockRecorder is the mock recorder for MockInventoryServiceServer.
type MockInventoryServiceServerMockRecorder struct {
	mock *MockInventoryServiceServer
}

// NewMockInventoryServiceServer creates a new mock instance.
func NewMockInventoryServiceServer(ctrl *gomock.Controller) *MockInventoryServiceServer {
	mock := &MockInventoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryServiceServer) EXPECT() *MockInventoryServiceServerMockRecorder {
	return m.recorder
}

// AddInventoryItem mocks base method.
func (m *MockInventoryServiceServer) AddInventoryItem(arg0 context.Context, arg1 *v1.AddInventoryItemRequest) (*v1.AddInventoryItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInventoryItem", arg0, arg1)
	ret0, _ := ret[0].(*v1.AddInventoryItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInventoryItem indicates an expected call of AddInventoryItem.
func (mr *MockInventoryServiceServerMockRecorder) AddInventoryItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInventoryItem", reflect.TypeOf((*MockInventoryServiceServer)(nil).AddInventoryItem), arg0, arg1)
}

// GetCharacterInventory mocks base method.
func (m *MockInventoryServiceServer) GetCharacterInventory(arg0 context.Context, arg1 *v1.GetCharacterInventoryRequest) (*v1.GetCharacterInventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacterInventory", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetCharacterInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacterInventory indicates an expected call of GetCharacterInventory.
func (mr *MockInventoryServiceServerMockRecorder) GetCharacterInventory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterInventory", reflect.TypeOf((*MockInventoryServiceServer)(nil).GetCharacterInventory), arg0, arg1)
}


// RemoveInventoryItem mocks base method.
func (m *MockInventoryServiceServer) RemoveInventoryItem(arg0 context.Context, arg1 *v1.RemoveInventoryItemRequest) (*v1.RemoveInventoryItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveInventoryItem", arg0, arg1)
	ret0, _ := ret[0].(*v1.RemoveInventoryItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveInventoryItem indicates an expected call of RemoveInventoryItem.
func (mr *MockInventoryServiceServerMockRecorder) RemoveInventoryItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInventoryItem", reflect.TypeOf((*MockInventoryServiceServer)(nil).RemoveInventoryItem), arg0, arg1)
}

// UpdateItemQuantity mocks base method.
func (m *MockInventoryServiceServer) UpdateItemQuantity(arg0 context.Context, arg1 *v1.UpdateItemQuantityRequest) (*v1.UpdateItemQuantityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemQuantity", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateItemQuantityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemQuantity indicates an expected call of UpdateItemQuantity.
func (mr *MockInventoryServiceServerMockRecorder) UpdateItemQuantity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemQuantity", reflect.TypeOf((*MockInventoryServiceServer)(nil).UpdateItemQuantity), arg0, arg1)
}

// mustEmbedUnimplementedInventoryServiceServer mocks base method.
func (m *MockInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInventoryServiceServer")
}

// mustEmbedUnimplementedInventoryServiceServer indicates an expected call of mustEmbedUnimplementedInventoryServiceServer.
func (mr *MockInventoryServiceServerMockRecorder) mustEmbedUnimplementedInventoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInventoryServiceServer", reflect.TypeOf((*MockInventoryServiceServer)(nil).mustEmbedUnimplementedInventoryServiceServer))
}

// MockUnsafeInventoryServiceServer is a mock of UnsafeInventoryServiceServer interface.
type MockUnsafeInventoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInventoryServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeInventoryServiceServerMockRecorder is the mock recorder for MockUnsafeInventoryServiceServer.
type MockUnsafeInventoryServiceServerMockRecorder struct {
	mock *MockUnsafeInventoryServiceServer
}

// NewMockUnsafeInventoryServiceServer creates a new mock instance.
func NewMockUnsafeInventoryServiceServer(ctrl *gomock.Controller) *MockUnsafeInventoryServiceServer {
	mock := &MockUnsafeInventoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInventoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInventoryServiceServer) EXPECT() *MockUnsafeInventoryServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInventoryServiceServer mocks base method.
func (m *MockUnsafeInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInventoryServiceServer")
}

// mustEmbedUnimplementedInventoryServiceServer indicates an expected call of mustEmbedUnimplementedInventoryServiceServer.
func (mr *MockUnsafeInventoryServiceServerMockRecorder) mustEmbedUnimplementedInventoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInventoryServiceServer", reflect.TypeOf((*MockUnsafeInventoryServiceServer)(nil).mustEmbedUnimplementedInventoryServiceServer))
}
