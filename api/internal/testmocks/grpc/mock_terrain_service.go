// Code generated by MockGen. DO NOT EDIT.
// Source: /home/alyx/code/VoidMesh/api/api/proto/terrain/v1/terrain_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=/home/alyx/code/VoidMesh/api/api/proto/terrain/v1/terrain_grpc.pb.go -destination=/home/alyx/code/VoidMesh/api/api/internal/testmocks/grpc/mock_terrain_service.go -package=mockgrpc
//

// Package mockgrpc is a generated GoMock package.
package mockgrpc

import (
	context "context"
	reflect "reflect"

	v1 "github.com/VoidMesh/api/api/proto/terrain/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTerrainServiceClient is a mock of TerrainServiceClient interface.
type MockTerrainServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTerrainServiceClientMockRecorder
	isgomock struct{}
}

// MockTerrainServiceClientMockRecorder is the mock recorder for MockTerrainServiceClient.
type MockTerrainServiceClientMockRecorder struct {
	mock *MockTerrainServiceClient
}

// NewMockTerrainServiceClient creates a new mock instance.
func NewMockTerrainServiceClient(ctrl *gomock.Controller) *MockTerrainServiceClient {
	mock := &MockTerrainServiceClient{ctrl: ctrl}
	mock.recorder = &MockTerrainServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerrainServiceClient) EXPECT() *MockTerrainServiceClientMockRecorder {
	return m.recorder
}

// GetTerrainTypes mocks base method.
func (m *MockTerrainServiceClient) GetTerrainTypes(ctx context.Context, in *v1.GetTerrainTypesRequest, opts ...grpc.CallOption) (*v1.GetTerrainTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTerrainTypes", varargs...)
	ret0, _ := ret[0].(*v1.GetTerrainTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTerrainTypes indicates an expected call of GetTerrainTypes.
func (mr *MockTerrainServiceClientMockRecorder) GetTerrainTypes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerrainTypes", reflect.TypeOf((*MockTerrainServiceClient)(nil).GetTerrainTypes), varargs...)
}

// MockTerrainServiceServer is a mock of TerrainServiceServer interface.
type MockTerrainServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTerrainServiceServerMockRecorder
	isgomock struct{}
}

// MockTerrainServiceServerMockRecorder is the mock recorder for MockTerrainServiceServer.
type MockTerrainServiceServerMockRecorder struct {
	mock *MockTerrainServiceServer
}

// NewMockTerrainServiceServer creates a new mock instance.
func NewMockTerrainServiceServer(ctrl *gomock.Controller) *MockTerrainServiceServer {
	mock := &MockTerrainServiceServer{ctrl: ctrl}
	mock.recorder = &MockTerrainServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerrainServiceServer) EXPECT() *MockTerrainServiceServerMockRecorder {
	return m.recorder
}

// GetTerrainTypes mocks base method.
func (m *MockTerrainServiceServer) GetTerrainTypes(arg0 context.Context, arg1 *v1.GetTerrainTypesRequest) (*v1.GetTerrainTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTerrainTypes", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetTerrainTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTerrainTypes indicates an expected call of GetTerrainTypes.
func (mr *MockTerrainServiceServerMockRecorder) GetTerrainTypes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerrainTypes", reflect.TypeOf((*MockTerrainServiceServer)(nil).GetTerrainTypes), arg0, arg1)
}

// mustEmbedUnimplementedTerrainServiceServer mocks base method.
func (m *MockTerrainServiceServer) mustEmbedUnimplementedTerrainServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTerrainServiceServer")
}

// mustEmbedUnimplementedTerrainServiceServer indicates an expected call of mustEmbedUnimplementedTerrainServiceServer.
func (mr *MockTerrainServiceServerMockRecorder) mustEmbedUnimplementedTerrainServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTerrainServiceServer", reflect.TypeOf((*MockTerrainServiceServer)(nil).mustEmbedUnimplementedTerrainServiceServer))
}

// MockUnsafeTerrainServiceServer is a mock of UnsafeTerrainServiceServer interface.
type MockUnsafeTerrainServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTerrainServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeTerrainServiceServerMockRecorder is the mock recorder for MockUnsafeTerrainServiceServer.
type MockUnsafeTerrainServiceServerMockRecorder struct {
	mock *MockUnsafeTerrainServiceServer
}

// NewMockUnsafeTerrainServiceServer creates a new mock instance.
func NewMockUnsafeTerrainServiceServer(ctrl *gomock.Controller) *MockUnsafeTerrainServiceServer {
	mock := &MockUnsafeTerrainServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTerrainServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTerrainServiceServer) EXPECT() *MockUnsafeTerrainServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTerrainServiceServer mocks base method.
func (m *MockUnsafeTerrainServiceServer) mustEmbedUnimplementedTerrainServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTerrainServiceServer")
}

// mustEmbedUnimplementedTerrainServiceServer indicates an expected call of mustEmbedUnimplementedTerrainServiceServer.
func (mr *MockUnsafeTerrainServiceServerMockRecorder) mustEmbedUnimplementedTerrainServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTerrainServiceServer", reflect.TypeOf((*MockUnsafeTerrainServiceServer)(nil).mustEmbedUnimplementedTerrainServiceServer))
}
