// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go
//
// Generated by this command:
//
//	mockgen -source=logger.go -destination=mock_logger.go -package=mockexternal
//

// Package mockexternal is a generated GoMock package.
package mockexternal

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockLoggerInterface is a mock of LoggerInterface interface.
type MockLoggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerInterfaceMockRecorder
	isgomock struct{}
}

// MockLoggerInterfaceMockRecorder is the mock recorder for MockLoggerInterface.
type MockLoggerInterfaceMockRecorder struct {
	mock *MockLoggerInterface
}

// NewMockLoggerInterface creates a new mock instance.
func NewMockLoggerInterface(ctrl *gomock.Controller) *MockLoggerInterface {
	mock := &MockLoggerInterface{ctrl: ctrl}
	mock.recorder = &MockLoggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerInterface) EXPECT() *MockLoggerInterfaceMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerInterface) Debug(msg any, keyvals ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerInterfaceMockRecorder) Debug(msg any, keyvals ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerInterface)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLoggerInterface) Error(msg any, keyvals ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerInterfaceMockRecorder) Error(msg any, keyvals ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerInterface)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockLoggerInterface) Fatal(msg any, keyvals ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerInterfaceMockRecorder) Fatal(msg any, keyvals ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLoggerInterface)(nil).Fatal), varargs...)
}

// Info mocks base method.
func (m *MockLoggerInterface) Info(msg any, keyvals ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerInterfaceMockRecorder) Info(msg any, keyvals ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerInterface)(nil).Info), varargs...)
}

// SetOutput mocks base method.
func (m *MockLoggerInterface) SetOutput(w io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOutput", w)
}

// SetOutput indicates an expected call of SetOutput.
func (mr *MockLoggerInterfaceMockRecorder) SetOutput(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutput", reflect.TypeOf((*MockLoggerInterface)(nil).SetOutput), w)
}

// Warn mocks base method.
func (m *MockLoggerInterface) Warn(msg any, keyvals ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerInterfaceMockRecorder) Warn(msg any, keyvals ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerInterface)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockLoggerInterface) With(keyvals ...any) LoggerInterface {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(LoggerInterface)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerInterfaceMockRecorder) With(keyvals ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLoggerInterface)(nil).With), keyvals...)
}

// MockContextInterface is a mock of ContextInterface interface.
type MockContextInterface struct {
	ctrl     *gomock.Controller
	recorder *MockContextInterfaceMockRecorder
	isgomock struct{}
}

// MockContextInterfaceMockRecorder is the mock recorder for MockContextInterface.
type MockContextInterfaceMockRecorder struct {
	mock *MockContextInterface
}

// NewMockContextInterface creates a new mock instance.
func NewMockContextInterface(ctrl *gomock.Controller) *MockContextInterface {
	mock := &MockContextInterface{ctrl: ctrl}
	mock.recorder = &MockContextInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextInterface) EXPECT() *MockContextInterfaceMockRecorder {
	return m.recorder
}

// WithCancel mocks base method.
func (m *MockContextInterface) WithCancel(parent context.Context) (context.Context, context.CancelFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCancel", parent)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(context.CancelFunc)
	return ret0, ret1
}

// WithCancel indicates an expected call of WithCancel.
func (mr *MockContextInterfaceMockRecorder) WithCancel(parent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCancel", reflect.TypeOf((*MockContextInterface)(nil).WithCancel), parent)
}

// WithTimeout mocks base method.
func (m *MockContextInterface) WithTimeout(parent context.Context, timeout time.Duration) (context.Context, context.CancelFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimeout", parent, timeout)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(context.CancelFunc)
	return ret0, ret1
}

// WithTimeout indicates an expected call of WithTimeout.
func (mr *MockContextInterfaceMockRecorder) WithTimeout(parent, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimeout", reflect.TypeOf((*MockContextInterface)(nil).WithTimeout), parent, timeout)
}

// WithValue mocks base method.
func (m *MockContextInterface) WithValue(parent context.Context, key, val any) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithValue", parent, key, val)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithValue indicates an expected call of WithValue.
func (mr *MockContextInterfaceMockRecorder) WithValue(parent, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithValue", reflect.TypeOf((*MockContextInterface)(nil).WithValue), parent, key, val)
}
