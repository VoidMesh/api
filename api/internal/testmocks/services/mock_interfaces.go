// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock_interfaces.go -package=mockservices
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCharacterServiceInterface is a mock of CharacterServiceInterface interface.
type MockCharacterServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockCharacterServiceInterfaceMockRecorder is the mock recorder for MockCharacterServiceInterface.
type MockCharacterServiceInterfaceMockRecorder struct {
	mock *MockCharacterServiceInterface
}

// NewMockCharacterServiceInterface creates a new mock instance.
func NewMockCharacterServiceInterface(ctrl *gomock.Controller) *MockCharacterServiceInterface {
	mock := &MockCharacterServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCharacterServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacterServiceInterface) EXPECT() *MockCharacterServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateCharacter mocks base method.
func (m *MockCharacterServiceInterface) CreateCharacter(ctx context.Context, userID, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharacter", ctx, userID, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockCharacterServiceInterfaceMockRecorder) CreateCharacter(ctx, userID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockCharacterServiceInterface)(nil).CreateCharacter), ctx, userID, name)
}

// GetCharacter mocks base method.
func (m *MockCharacterServiceInterface) GetCharacter(ctx context.Context, id string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", ctx, id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockCharacterServiceInterfaceMockRecorder) GetCharacter(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockCharacterServiceInterface)(nil).GetCharacter), ctx, id)
}

// ListCharacters mocks base method.
func (m *MockCharacterServiceInterface) ListCharacters(ctx context.Context, userID string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCharacters", ctx, userID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCharacters indicates an expected call of ListCharacters.
func (mr *MockCharacterServiceInterfaceMockRecorder) ListCharacters(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharacters", reflect.TypeOf((*MockCharacterServiceInterface)(nil).ListCharacters), ctx, userID)
}

// MoveCharacter mocks base method.
func (m *MockCharacterServiceInterface) MoveCharacter(ctx context.Context, characterID string, x, y int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCharacter", ctx, characterID, x, y)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveCharacter indicates an expected call of MoveCharacter.
func (mr *MockCharacterServiceInterfaceMockRecorder) MoveCharacter(ctx, characterID, x, y any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCharacter", reflect.TypeOf((*MockCharacterServiceInterface)(nil).MoveCharacter), ctx, characterID, x, y)
}

// MockChunkServiceInterface is a mock of ChunkServiceInterface interface.
type MockChunkServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChunkServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockChunkServiceInterfaceMockRecorder is the mock recorder for MockChunkServiceInterface.
type MockChunkServiceInterfaceMockRecorder struct {
	mock *MockChunkServiceInterface
}

// NewMockChunkServiceInterface creates a new mock instance.
func NewMockChunkServiceInterface(ctrl *gomock.Controller) *MockChunkServiceInterface {
	mock := &MockChunkServiceInterface{ctrl: ctrl}
	mock.recorder = &MockChunkServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChunkServiceInterface) EXPECT() *MockChunkServiceInterfaceMockRecorder {
	return m.recorder
}

// GenerateChunk mocks base method.
func (m *MockChunkServiceInterface) GenerateChunk(ctx context.Context, worldID string, x, y int32) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChunk", ctx, worldID, x, y)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChunk indicates an expected call of GenerateChunk.
func (mr *MockChunkServiceInterfaceMockRecorder) GenerateChunk(ctx, worldID, x, y any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChunk", reflect.TypeOf((*MockChunkServiceInterface)(nil).GenerateChunk), ctx, worldID, x, y)
}

// GetChunk mocks base method.
func (m *MockChunkServiceInterface) GetChunk(ctx context.Context, worldID string, x, y int32) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunk", ctx, worldID, x, y)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunk indicates an expected call of GetChunk.
func (mr *MockChunkServiceInterfaceMockRecorder) GetChunk(ctx, worldID, x, y any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunk", reflect.TypeOf((*MockChunkServiceInterface)(nil).GetChunk), ctx, worldID, x, y)
}

// MockWorldServiceInterface is a mock of WorldServiceInterface interface.
type MockWorldServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorldServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockWorldServiceInterfaceMockRecorder is the mock recorder for MockWorldServiceInterface.
type MockWorldServiceInterfaceMockRecorder struct {
	mock *MockWorldServiceInterface
}

// NewMockWorldServiceInterface creates a new mock instance.
func NewMockWorldServiceInterface(ctrl *gomock.Controller) *MockWorldServiceInterface {
	mock := &MockWorldServiceInterface{ctrl: ctrl}
	mock.recorder = &MockWorldServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorldServiceInterface) EXPECT() *MockWorldServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateWorld mocks base method.
func (m *MockWorldServiceInterface) CreateWorld(ctx context.Context, name string, seed int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorld", ctx, name, seed)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorld indicates an expected call of CreateWorld.
func (mr *MockWorldServiceInterfaceMockRecorder) CreateWorld(ctx, name, seed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorld", reflect.TypeOf((*MockWorldServiceInterface)(nil).CreateWorld), ctx, name, seed)
}

// GetWorld mocks base method.
func (m *MockWorldServiceInterface) GetWorld(ctx context.Context, id string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorld", ctx, id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorld indicates an expected call of GetWorld.
func (mr *MockWorldServiceInterfaceMockRecorder) GetWorld(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorld", reflect.TypeOf((*MockWorldServiceInterface)(nil).GetWorld), ctx, id)
}
