// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock_interfaces.go -package=mockdb
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerierInterface is a mock of QuerierInterface interface.
type MockQuerierInterface struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierInterfaceMockRecorder
	isgomock struct{}
}

// MockQuerierInterfaceMockRecorder is the mock recorder for MockQuerierInterface.
type MockQuerierInterfaceMockRecorder struct {
	mock *MockQuerierInterface
}

// NewMockQuerierInterface creates a new mock instance.
func NewMockQuerierInterface(ctrl *gomock.Controller) *MockQuerierInterface {
	mock := &MockQuerierInterface{ctrl: ctrl}
	mock.recorder = &MockQuerierInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerierInterface) EXPECT() *MockQuerierInterfaceMockRecorder {
	return m.recorder
}

// CreateCharacter mocks base method.
func (m *MockQuerierInterface) CreateCharacter(ctx context.Context, userID, name string, x, y, chunkX, chunkY int32) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharacter", ctx, userID, name, x, y, chunkX, chunkY)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockQuerierInterfaceMockRecorder) CreateCharacter(ctx, userID, name, x, y, chunkX, chunkY any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockQuerierInterface)(nil).CreateCharacter), ctx, userID, name, x, y, chunkX, chunkY)
}

// CreateUser mocks base method.
func (m *MockQuerierInterface) CreateUser(ctx context.Context, username, displayName, email, passwordHash string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username, displayName, email, passwordHash)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierInterfaceMockRecorder) CreateUser(ctx, username, displayName, email, passwordHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerierInterface)(nil).CreateUser), ctx, username, displayName, email, passwordHash)
}

// GetCharacter mocks base method.
func (m *MockQuerierInterface) GetCharacter(ctx context.Context, id string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", ctx, id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockQuerierInterfaceMockRecorder) GetCharacter(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockQuerierInterface)(nil).GetCharacter), ctx, id)
}

// GetCharactersByUserID mocks base method.
func (m *MockQuerierInterface) GetCharactersByUserID(ctx context.Context, userID string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharactersByUserID", ctx, userID)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharactersByUserID indicates an expected call of GetCharactersByUserID.
func (mr *MockQuerierInterfaceMockRecorder) GetCharactersByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharactersByUserID", reflect.TypeOf((*MockQuerierInterface)(nil).GetCharactersByUserID), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockQuerierInterface) GetUserByEmail(ctx context.Context, email string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierInterfaceMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerierInterface)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockQuerierInterface) GetUserByID(ctx context.Context, id string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockQuerierInterfaceMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockQuerierInterface)(nil).GetUserByID), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockQuerierInterface) GetUserByUsername(ctx context.Context, username string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockQuerierInterfaceMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockQuerierInterface)(nil).GetUserByUsername), ctx, username)
}

// UpdateCharacterPosition mocks base method.
func (m *MockQuerierInterface) UpdateCharacterPosition(ctx context.Context, id string, x, y, chunkX, chunkY int32) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCharacterPosition", ctx, id, x, y, chunkX, chunkY)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCharacterPosition indicates an expected call of UpdateCharacterPosition.
func (mr *MockQuerierInterfaceMockRecorder) UpdateCharacterPosition(ctx, id, x, y, chunkX, chunkY any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCharacterPosition", reflect.TypeOf((*MockQuerierInterface)(nil).UpdateCharacterPosition), ctx, id, x, y, chunkX, chunkY)
}

// MockPoolInterface is a mock of PoolInterface interface.
type MockPoolInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPoolInterfaceMockRecorder
	isgomock struct{}
}

// MockPoolInterfaceMockRecorder is the mock recorder for MockPoolInterface.
type MockPoolInterfaceMockRecorder struct {
	mock *MockPoolInterface
}

// NewMockPoolInterface creates a new mock instance.
func NewMockPoolInterface(ctrl *gomock.Controller) *MockPoolInterface {
	mock := &MockPoolInterface{ctrl: ctrl}
	mock.recorder = &MockPoolInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolInterface) EXPECT() *MockPoolInterfaceMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockPoolInterface) Acquire(ctx context.Context) (*pgxpool.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx)
	ret0, _ := ret[0].(*pgxpool.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockPoolInterfaceMockRecorder) Acquire(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockPoolInterface)(nil).Acquire), ctx)
}

// Begin mocks base method.
func (m *MockPoolInterface) Begin(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockPoolInterfaceMockRecorder) Begin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockPoolInterface)(nil).Begin), ctx)
}

// BeginTx mocks base method.
func (m *MockPoolInterface) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, txOptions)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockPoolInterfaceMockRecorder) BeginTx(ctx, txOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockPoolInterface)(nil).BeginTx), ctx, txOptions)
}

// Close mocks base method.
func (m *MockPoolInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPoolInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPoolInterface)(nil).Close))
}

// Config mocks base method.
func (m *MockPoolInterface) Config() *pgxpool.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*pgxpool.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockPoolInterfaceMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockPoolInterface)(nil).Config))
}

// Exec mocks base method.
func (m *MockPoolInterface) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPoolInterfaceMockRecorder) Exec(ctx, sql any, arguments ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPoolInterface)(nil).Exec), varargs...)
}

// Ping mocks base method.
func (m *MockPoolInterface) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPoolInterfaceMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPoolInterface)(nil).Ping), ctx)
}

// Query mocks base method.
func (m *MockPoolInterface) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPoolInterfaceMockRecorder) Query(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPoolInterface)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockPoolInterface) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockPoolInterfaceMockRecorder) QueryRow(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPoolInterface)(nil).QueryRow), varargs...)
}

// Stat mocks base method.
func (m *MockPoolInterface) Stat() *pgxpool.Stat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(*pgxpool.Stat)
	return ret0
}

// Stat indicates an expected call of Stat.
func (mr *MockPoolInterfaceMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockPoolInterface)(nil).Stat))
}
