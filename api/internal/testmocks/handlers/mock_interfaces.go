// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock_interfaces.go -package=mockhandlers
//

// Package mockhandlers is a generated GoMock package.
package mockhandlers

import (
	context "context"
	reflect "reflect"

	db "github.com/VoidMesh/api/api/db"
	v1 "github.com/VoidMesh/api/api/proto/character/v1"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, params db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, params)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, params)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserById mocks base method.
func (m *MockUserRepository) GetUserById(ctx context.Context, id pgtype.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepositoryMockRecorder) GetUserById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepository)(nil).GetUserById), ctx, id)
}

// GetUserByResetToken mocks base method.
func (m *MockUserRepository) GetUserByResetToken(ctx context.Context, resetToken pgtype.Text) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByResetToken", ctx, resetToken)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByResetToken indicates an expected call of GetUserByResetToken.
func (mr *MockUserRepositoryMockRecorder) GetUserByResetToken(ctx, resetToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByResetToken", reflect.TypeOf((*MockUserRepository)(nil).GetUserByResetToken), ctx, resetToken)
}

// GetUserByUsername mocks base method.
func (m *MockUserRepository) GetUserByUsername(ctx context.Context, username string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserRepositoryMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserRepository)(nil).GetUserByUsername), ctx, username)
}

// IndexUsers mocks base method.
func (m *MockUserRepository) IndexUsers(ctx context.Context, params db.IndexUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexUsers", ctx, params)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexUsers indicates an expected call of IndexUsers.
func (mr *MockUserRepositoryMockRecorder) IndexUsers(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexUsers", reflect.TypeOf((*MockUserRepository)(nil).IndexUsers), ctx, params)
}

// UpdateLastLoginAt mocks base method.
func (m *MockUserRepository) UpdateLastLoginAt(ctx context.Context, params db.UpdateLastLoginAtParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastLoginAt", ctx, params)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLastLoginAt indicates an expected call of UpdateLastLoginAt.
func (mr *MockUserRepositoryMockRecorder) UpdateLastLoginAt(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastLoginAt", reflect.TypeOf((*MockUserRepository)(nil).UpdateLastLoginAt), ctx, params)
}

// UpdateLoginAttempts mocks base method.
func (m *MockUserRepository) UpdateLoginAttempts(ctx context.Context, params db.UpdateLoginAttemptsParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoginAttempts", ctx, params)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoginAttempts indicates an expected call of UpdateLoginAttempts.
func (mr *MockUserRepositoryMockRecorder) UpdateLoginAttempts(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoginAttempts", reflect.TypeOf((*MockUserRepository)(nil).UpdateLoginAttempts), ctx, params)
}

// UpdatePasswordResetToken mocks base method.
func (m *MockUserRepository) UpdatePasswordResetToken(ctx context.Context, params db.UpdatePasswordResetTokenParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordResetToken", ctx, params)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePasswordResetToken indicates an expected call of UpdatePasswordResetToken.
func (mr *MockUserRepositoryMockRecorder) UpdatePasswordResetToken(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordResetToken", reflect.TypeOf((*MockUserRepository)(nil).UpdatePasswordResetToken), ctx, params)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, params db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, params)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, params)
}

// VerifyEmail mocks base method.
func (m *MockUserRepository) VerifyEmail(ctx context.Context, id pgtype.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUserRepositoryMockRecorder) VerifyEmail(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUserRepository)(nil).VerifyEmail), ctx, id)
}

// MockJWTService is a mock of JWTService interface.
type MockJWTService struct {
	ctrl     *gomock.Controller
	recorder *MockJWTServiceMockRecorder
	isgomock struct{}
}

// MockJWTServiceMockRecorder is the mock recorder for MockJWTService.
type MockJWTServiceMockRecorder struct {
	mock *MockJWTService
}

// NewMockJWTService creates a new mock instance.
func NewMockJWTService(ctrl *gomock.Controller) *MockJWTService {
	mock := &MockJWTService{ctrl: ctrl}
	mock.recorder = &MockJWTServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTService) EXPECT() *MockJWTServiceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockJWTService) GenerateToken(userID, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userID, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJWTServiceMockRecorder) GenerateToken(userID, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJWTService)(nil).GenerateToken), userID, username)
}

// ValidateToken mocks base method.
func (m *MockJWTService) ValidateToken(tokenString string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockJWTServiceMockRecorder) ValidateToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockJWTService)(nil).ValidateToken), tokenString)
}

// MockPasswordService is a mock of PasswordService interface.
type MockPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordServiceMockRecorder
	isgomock struct{}
}

// MockPasswordServiceMockRecorder is the mock recorder for MockPasswordService.
type MockPasswordServiceMockRecorder struct {
	mock *MockPasswordService
}

// NewMockPasswordService creates a new mock instance.
func NewMockPasswordService(ctrl *gomock.Controller) *MockPasswordService {
	mock := &MockPasswordService{ctrl: ctrl}
	mock.recorder = &MockPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordService) EXPECT() *MockPasswordServiceMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockPasswordService) CheckPassword(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockPasswordServiceMockRecorder) CheckPassword(password, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockPasswordService)(nil).CheckPassword), password, hash)
}

// HashPassword mocks base method.
func (m *MockPasswordService) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockPasswordServiceMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockPasswordService)(nil).HashPassword), password)
}

// MockTokenGenerator is a mock of TokenGenerator interface.
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
	isgomock struct{}
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator.
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance.
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockTokenGenerator) GenerateToken(length int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", length)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenGeneratorMockRecorder) GenerateToken(length any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateToken), length)
}

// MockCharacterService is a mock of CharacterService interface.
type MockCharacterService struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterServiceMockRecorder
	isgomock struct{}
}

// MockCharacterServiceMockRecorder is the mock recorder for MockCharacterService.
type MockCharacterServiceMockRecorder struct {
	mock *MockCharacterService
}

// NewMockCharacterService creates a new mock instance.
func NewMockCharacterService(ctrl *gomock.Controller) *MockCharacterService {
	mock := &MockCharacterService{ctrl: ctrl}
	mock.recorder = &MockCharacterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacterService) EXPECT() *MockCharacterServiceMockRecorder {
	return m.recorder
}

// CreateCharacter mocks base method.
func (m *MockCharacterService) CreateCharacter(ctx context.Context, userID string, req *v1.CreateCharacterRequest) (*v1.CreateCharacterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharacter", ctx, userID, req)
	ret0, _ := ret[0].(*v1.CreateCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockCharacterServiceMockRecorder) CreateCharacter(ctx, userID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockCharacterService)(nil).CreateCharacter), ctx, userID, req)
}

// DeleteCharacter mocks base method.
func (m *MockCharacterService) DeleteCharacter(ctx context.Context, req *v1.DeleteCharacterRequest) (*v1.DeleteCharacterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCharacter", ctx, req)
	ret0, _ := ret[0].(*v1.DeleteCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCharacter indicates an expected call of DeleteCharacter.
func (mr *MockCharacterServiceMockRecorder) DeleteCharacter(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharacter", reflect.TypeOf((*MockCharacterService)(nil).DeleteCharacter), ctx, req)
}

// GetCharacter mocks base method.
func (m *MockCharacterService) GetCharacter(ctx context.Context, req *v1.GetCharacterRequest) (*v1.GetCharacterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", ctx, req)
	ret0, _ := ret[0].(*v1.GetCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockCharacterServiceMockRecorder) GetCharacter(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockCharacterService)(nil).GetCharacter), ctx, req)
}

// GetUserCharacters mocks base method.
func (m *MockCharacterService) GetUserCharacters(ctx context.Context, userID string) (*v1.GetMyCharactersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCharacters", ctx, userID)
	ret0, _ := ret[0].(*v1.GetMyCharactersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCharacters indicates an expected call of GetUserCharacters.
func (mr *MockCharacterServiceMockRecorder) GetUserCharacters(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCharacters", reflect.TypeOf((*MockCharacterService)(nil).GetUserCharacters), ctx, userID)
}

// MoveCharacter mocks base method.
func (m *MockCharacterService) MoveCharacter(ctx context.Context, req *v1.MoveCharacterRequest) (*v1.MoveCharacterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCharacter", ctx, req)
	ret0, _ := ret[0].(*v1.MoveCharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveCharacter indicates an expected call of MoveCharacter.
func (mr *MockCharacterServiceMockRecorder) MoveCharacter(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCharacter", reflect.TypeOf((*MockCharacterService)(nil).MoveCharacter), ctx, req)
}

// MockWorldService is a mock of WorldService interface.
type MockWorldService struct {
	ctrl     *gomock.Controller
	recorder *MockWorldServiceMockRecorder
	isgomock struct{}
}

// MockWorldServiceMockRecorder is the mock recorder for MockWorldService.
type MockWorldServiceMockRecorder struct {
	mock *MockWorldService
}

// NewMockWorldService creates a new mock instance.
func NewMockWorldService(ctrl *gomock.Controller) *MockWorldService {
	mock := &MockWorldService{ctrl: ctrl}
	mock.recorder = &MockWorldServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorldService) EXPECT() *MockWorldServiceMockRecorder {
	return m.recorder
}

// DeleteWorld mocks base method.
func (m *MockWorldService) DeleteWorld(ctx context.Context, id pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorld", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorld indicates an expected call of DeleteWorld.
func (mr *MockWorldServiceMockRecorder) DeleteWorld(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorld", reflect.TypeOf((*MockWorldService)(nil).DeleteWorld), ctx, id)
}

// GetDefaultWorld mocks base method.
func (m *MockWorldService) GetDefaultWorld(ctx context.Context) (db.World, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultWorld", ctx)
	ret0, _ := ret[0].(db.World)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultWorld indicates an expected call of GetDefaultWorld.
func (mr *MockWorldServiceMockRecorder) GetDefaultWorld(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultWorld", reflect.TypeOf((*MockWorldService)(nil).GetDefaultWorld), ctx)
}

// GetWorldByID mocks base method.
func (m *MockWorldService) GetWorldByID(ctx context.Context, id pgtype.UUID) (db.World, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldByID", ctx, id)
	ret0, _ := ret[0].(db.World)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldByID indicates an expected call of GetWorldByID.
func (mr *MockWorldServiceMockRecorder) GetWorldByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldByID", reflect.TypeOf((*MockWorldService)(nil).GetWorldByID), ctx, id)
}

// ListWorlds mocks base method.
func (m *MockWorldService) ListWorlds(ctx context.Context) ([]db.World, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorlds", ctx)
	ret0, _ := ret[0].([]db.World)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorlds indicates an expected call of ListWorlds.
func (mr *MockWorldServiceMockRecorder) ListWorlds(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorlds", reflect.TypeOf((*MockWorldService)(nil).ListWorlds), ctx)
}

// UpdateWorld mocks base method.
func (m *MockWorldService) UpdateWorld(ctx context.Context, id pgtype.UUID, name string) (db.World, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorld", ctx, id, name)
	ret0, _ := ret[0].(db.World)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorld indicates an expected call of UpdateWorld.
func (mr *MockWorldServiceMockRecorder) UpdateWorld(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorld", reflect.TypeOf((*MockWorldService)(nil).UpdateWorld), ctx, id, name)
}
